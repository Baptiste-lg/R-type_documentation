<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="Spawner_8cpp" kind="file" language="C++">
    <compoundname>Spawner.cpp</compoundname>
    <includes refid="Spawner_8hpp" local="yes">Spawner.hpp</includes>
    <includes refid="Global_8hpp" local="yes">Global.hpp</includes>
    <incdepgraph>
      <node id="43">
        <label>Behaviour.hpp</label>
        <link refid="Behaviour_8hpp_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Component.hpp</label>
        <link refid="Component_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Entity.hpp</label>
        <link refid="Entity_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Event.hpp</label>
        <link refid="Event_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Global.hpp</label>
        <link refid="Global_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ISystem.hpp</label>
        <link refid="ISystem_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Registry.hpp</label>
        <link refid="Registry_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SparseArray.hpp</label>
        <link refid="SparseArray_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Spawner.hpp</label>
        <link refid="Spawner_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>TextureManager.hpp</label>
        <link refid="TextureManager_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>ThreadPool.hpp</label>
        <link refid="ThreadPool_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Spawner.cpp</label>
        <link refid="Spawner_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="15">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="29">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>any</label>
      </node>
      <node id="31">
        <label>array</label>
      </node>
      <node id="41">
        <label>chrono</label>
      </node>
      <node id="28">
        <label>cmath</label>
      </node>
      <node id="26">
        <label>complex</label>
      </node>
      <node id="38">
        <label>condition_variable</label>
      </node>
      <node id="21">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>fftw3.h</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="39">
        <label>future</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="23">
        <label>libconfig.h++</label>
      </node>
      <node id="32">
        <label>map</label>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="12">
        <label>mutex</label>
      </node>
      <node id="30">
        <label>numeric</label>
      </node>
      <node id="11">
        <label>optional</label>
      </node>
      <node id="36">
        <label>queue</label>
      </node>
      <node id="33">
        <label>set</label>
      </node>
      <node id="42">
        <label>shared_mutex</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="37">
        <label>thread</label>
      </node>
      <node id="16">
        <label>tuple</label>
      </node>
      <node id="6">
        <label>typeindex</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="40">
        <label>unordered_set</label>
      </node>
      <node id="19">
        <label>utility</label>
      </node>
      <node id="27">
        <label>valarray</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Spawner_8cpp_1a2334c4bdb23a036d0ca63fcff7ef9a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spawnEnemy</definition>
        <argsstring>(Registry &amp;registry, Behavior behavior, float x, float y, const std::string &amp;textureName, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>spawnEnemy</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="structBehavior" kindref="compound">Behavior</ref></type>
          <declname>behavior</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="7" column="6" bodyfile="src/Spawner.cpp" bodystart="7" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a9a3d83213993b804d030497755907530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t FFTSpawnEnemy</definition>
        <argsstring>(Registry &amp;registry, const std::string &amp;behavior_id, float x, float y, const std::string &amp;textureName, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>FFTSpawnEnemy</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>behavior_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="23" column="10" bodyfile="src/Spawner.cpp" bodystart="23" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1afe2aa4002b6736ea7a678bd12b21645b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnBackgroundLayer</definition>
        <argsstring>(Registry &amp;registry, Behavior behavior, const std::string &amp;textureName, float velocityX, float velocityY, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>spawnBackgroundLayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="structBehavior" kindref="compound">Behavior</ref></type>
          <declname>behavior</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>velocityX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>velocityY</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="77" column="10" bodyfile="src/Spawner.cpp" bodystart="77" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1acaa5186bd03bceebdf1bd87d74304425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnThruster</definition>
        <argsstring>(Registry &amp;registry, entity_t parentEntity, float xOffset, float yOffset)</argsstring>
        <name>spawnThruster</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>entity_t</type>
          <declname>parentEntity</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="93" column="10" bodyfile="src/Spawner.cpp" bodystart="93" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a9085dd83cda8ce95f48ff46a20bd46e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnPlayer</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect)</argsstring>
        <name>spawnPlayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="110" column="10" bodyfile="src/Spawner.cpp" bodystart="110" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a003a983499bb55fe73ef92c22b59d855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnAnimatedEntity</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect, const MyVector2 &amp;scale, const std::string &amp;textureName, float posX, float posY)</argsstring>
        <name>spawnAnimatedEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="168" column="10" bodyfile="src/Spawner.cpp" bodystart="168" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1aa55deaadefdb7fb02964820ec661555f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnGameConfig</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnGameConfig</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="185" column="10" bodyfile="src/Spawner.cpp" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a002ee4c9b8ad897097e4d0487f03c72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnServerEntity</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnServerEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="192" column="10" bodyfile="src/Spawner.cpp" bodystart="192" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a5c11df13ccda012872f488f15e6ca63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnClientEntity</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnClientEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="200" column="10" bodyfile="src/Spawner.cpp" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a3afff98a5abaa57642b51ead9e998927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnNoneLocalPlayer</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect)</argsstring>
        <name>spawnNoneLocalPlayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="207" column="10" bodyfile="src/Spawner.cpp" bodystart="207" bodyend="261"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Spawner.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Global.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spawnEnemy(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref><sp/>behavior,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enemy<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structEnemy" kindref="compound">Enemy</ref>{});</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{std::move(behavior)});</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawable;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>drawable.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>drawable.textureRect<sp/>=<sp/>textureRect;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>drawable.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/>std::move(drawable));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{2.0f});</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Enemy<sp/>spawned<sp/>at<sp/>&quot;<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Enemy<sp/>id:<sp/>&quot;<sp/>&lt;&lt;<sp/>enemy<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">entity_t<sp/>FFTSpawnEnemy(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>behavior_id,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enemy<sp/>=<sp/>registry.queue_for_creation([=](<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/>entity_t<sp/>enemy)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structEnemy" kindref="compound">Enemy</ref>{});</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{behavior_id});</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawable;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawable.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawable.textureRect<sp/>=<sp/>textureRect;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawable.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/>std::move(drawable));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{2.0f});</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Enemy<sp/>spawned<sp/>at<sp/>&quot;<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Enemy<sp/>id:<sp/>&quot;<sp/>&lt;&lt;<sp/>enemy<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addLaser<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Laser{});</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addDepth<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Depth{3.0f});</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addDrawable<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Drawable{&quot;laser&quot;,<sp/>{0,<sp/>0,<sp/>80,<sp/>60},<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addCollision<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Collision{true});</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addVelocity<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Velocity{-10,0});</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Spawner<sp/>playerSpawner{</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.spawnRate<sp/>=<sp/>0.2,</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.timeSinceLastSpawn<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.entityToSpawn<sp/>=<sp/>&quot;laser&quot;,</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xOffset<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yOffset<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xVelocity<sp/>=<sp/>1.0f,</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yVelocity<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.componentAdders<sp/>=<sp/>{addLaser,<sp/>addDepth,<sp/>addDrawable,<sp/>addCollision,<sp/>addVelocity}</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/>Spawner{std::move(playerSpawner)});</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="72"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enemy;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">entity_t<sp/>spawnBackgroundLayer(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref><sp/>behavior,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityY,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>textureRect;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{0.0f});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{std::move(behavior)});</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">entity_t<sp/>spawnThruster(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/>entity_t<sp/>parentEntity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xOffset,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yOffset)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentPos<sp/>=<sp/>registry.get_components&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parentPos[parentEntity].has_value())<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parent<sp/>entity<sp/>does<sp/>not<sp/>have<sp/>a<sp/>Position<sp/>component&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>thruster<sp/>entity<sp/>and<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>thrusterEntity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{parentPos[parentEntity]-&gt;x,<sp/>parentPos[parentEntity]-&gt;y});</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{</highlight><highlight class="stringliteral">&quot;p_thruster&quot;</highlight><highlight class="normal">,<sp/>{0,<sp/>0,<sp/>48,<sp/>48},<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{0,<sp/>3,<sp/>1.0f/FRAMERATE,<sp/>0.0f,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parentEntity,<sp/>xOffset,<sp/>yOffset});<sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>component<sp/>to<sp/>indicate<sp/>this<sp/>entity<sp/>follows<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{2.0f});</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thrusterEntity;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">entity_t<sp/>spawnPlayer(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;p_spaceship&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{400,<sp/>500});</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structControllable" kindref="compound">Controllable</ref>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structGameConfig" kindref="compound">GameConfig</ref>{1920,<sp/>1080,<sp/>100});</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ADD<sp/>THE<sp/>COMPONENT<sp/>IN<sp/>THE<sp/>SPAWNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addLaser<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Laser{});</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="126"><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addDepth<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Depth{3.0f});</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addDrawable<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Drawable{&quot;laserAnimated&quot;,<sp/>{0,<sp/>0,<sp/>64,<sp/>64},<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addAnimated<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Animation{0,<sp/>5,<sp/>3.0f/FRAMERATE,<sp/>0.0f,<sp/>false});</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addCollision<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Collision{});</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>ComponentAdder<sp/>addVelocity<sp/>=<sp/>[](entity_t<sp/>entity,<sp/>Registry&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Velocity{10,0});</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>Spawner<sp/>playerSpawner{</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.spawnRate<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.timeSinceLastSpawn<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.entityToSpawn<sp/>=<sp/>&quot;laserAnimated&quot;,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xOffset<sp/>=<sp/>200,</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yOffset<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xVelocity<sp/>=<sp/>1.0f,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yVelocity<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.componentAdders<sp/>=<sp/>{addLaser,<sp/>addDepth,<sp/>addDrawable,<sp/>addCollision,<sp/>addVelocity,<sp/>addAnimated}</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>Spawner{std::move(playerSpawner)});</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{3.0f});</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structHealth" kindref="compound">Health</ref>{100.0f});</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFFT" kindref="compound">FFT</ref>{});</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnThruster(registry,<sp/>entity,<sp/>0,<sp/>10);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PLAYER<sp/>SPAWER<sp/>ADDED&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">entity_t<sp/>spawnAnimatedEntity(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posY){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>{0,<sp/>0,<sp/>126,<sp/>126};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{posX,<sp/>posY});</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{1.0f});</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{0,<sp/>100,<sp/>1.0f/FRAMERATE,<sp/>0.0f,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">entity_t<sp/>spawnGameConfig(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spawning<sp/>GameConfig...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">entity_t<sp/>spawnServerEntity(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry){</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spawning<sp/>ServerEntity...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structNetwork" kindref="compound">Network</ref>{});</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structState" kindref="compound">State</ref>{});</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">entity_t<sp/>spawnClientEntity(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry){</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Spawning<sp/>ClientEntity...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structState" kindref="compound">State</ref>{});</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">entity_t<sp/>spawnNoneLocalPlayer(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;p_spaceship&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{400,<sp/>500});</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structControllable" kindref="compound">Controllable</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structGameConfig" kindref="compound">GameConfig</ref>{1920,<sp/>1080,<sp/>100});</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{3.0f});</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structHealth" kindref="compound">Health</ref>{100.0f});</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFFT" kindref="compound">FFT</ref>{});</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnThruster(registry,<sp/>entity,<sp/>0,<sp/>10);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addLaser<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structLaser" kindref="compound">Laser</ref>{});</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addDepth<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{3.0f});</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addDrawable<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{</highlight><highlight class="stringliteral">&quot;laserAnimated&quot;</highlight><highlight class="normal">,<sp/>{0,<sp/>0,<sp/>64,<sp/>64},<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addAnimated<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{0,<sp/>5,<sp/>3.0f/FRAMERATE,<sp/>0.0f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addCollision<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{});</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addVelocity<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{10,0});</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSpawner" kindref="compound">Spawner</ref><sp/>playerSpawner{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.spawnRate<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.timeSinceLastSpawn<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.entityToSpawn<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;laserAnimated&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xOffset<sp/>=<sp/>200,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yOffset<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xVelocity<sp/>=<sp/>1.0f,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yVelocity<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.componentSpawners<sp/>=<sp/>{addLaser,<sp/>addDepth,<sp/>addDrawable,<sp/>addCollision,<sp/>addVelocity,<sp/>addAnimated}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structSpawner" kindref="compound">Spawner</ref>{std::move(playerSpawner)});</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Spawner.cpp"/>
  </compounddef>
</doxygen>
