<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="Spawner_8hpp" kind="file" language="C++">
    <compoundname>Spawner.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="Registry_8hpp" local="yes">Registry.hpp</includes>
    <includes refid="Component_8hpp" local="yes">Component.hpp</includes>
    <includes refid="SparseArray_8hpp" local="yes">SparseArray.hpp</includes>
    <includes refid="Entity_8hpp" local="yes">Entity.hpp</includes>
    <includes refid="TextureManager_8hpp" local="yes">TextureManager.hpp</includes>
    <includes refid="Behaviour_8hpp" local="yes">Behaviour.hpp</includes>
    <includedby refid="ServerMain_8hpp" local="yes">include/ServerMain.hpp</includedby>
    <includedby refid="System_8hpp" local="yes">include/System.hpp</includedby>
    <includedby refid="ClientMain_8cpp" local="yes">src/ClientMain.cpp</includedby>
    <includedby refid="Spawner_8cpp" local="yes">src/Spawner.cpp</includedby>
    <includedby refid="main_8cpp" local="yes">src/main.cpp</includedby>
    <incdepgraph>
      <node id="42">
        <label>Behaviour.hpp</label>
        <link refid="Behaviour_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Component.hpp</label>
        <link refid="Component_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Entity.hpp</label>
        <link refid="Entity_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Event.hpp</label>
        <link refid="Event_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ISystem.hpp</label>
        <link refid="ISystem_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Registry.hpp</label>
        <link refid="Registry_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>SparseArray.hpp</label>
        <link refid="SparseArray_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/Spawner.hpp</label>
        <link refid="Spawner_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>TextureManager.hpp</label>
        <link refid="TextureManager_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>ThreadPool.hpp</label>
        <link refid="ThreadPool_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="14">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>any</label>
      </node>
      <node id="30">
        <label>array</label>
      </node>
      <node id="40">
        <label>chrono</label>
      </node>
      <node id="27">
        <label>cmath</label>
      </node>
      <node id="25">
        <label>complex</label>
      </node>
      <node id="37">
        <label>condition_variable</label>
      </node>
      <node id="20">
        <label>cstddef</label>
      </node>
      <node id="33">
        <label>fftw3.h</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="38">
        <label>future</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="22">
        <label>libconfig.h++</label>
      </node>
      <node id="31">
        <label>map</label>
      </node>
      <node id="17">
        <label>memory</label>
      </node>
      <node id="11">
        <label>mutex</label>
      </node>
      <node id="29">
        <label>numeric</label>
      </node>
      <node id="10">
        <label>optional</label>
      </node>
      <node id="35">
        <label>queue</label>
      </node>
      <node id="32">
        <label>set</label>
      </node>
      <node id="41">
        <label>shared_mutex</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="36">
        <label>thread</label>
      </node>
      <node id="15">
        <label>tuple</label>
      </node>
      <node id="5">
        <label>typeindex</label>
      </node>
      <node id="4">
        <label>unordered_map</label>
      </node>
      <node id="39">
        <label>unordered_set</label>
      </node>
      <node id="18">
        <label>utility</label>
      </node>
      <node id="26">
        <label>valarray</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/ServerMain.hpp</label>
        <link refid="ServerMain_8hpp_source"/>
      </node>
      <node id="1">
        <label>include/Spawner.hpp</label>
        <link refid="Spawner_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/System.hpp</label>
        <link refid="System_8hpp_source"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Spawner_8hpp_1a2334c4bdb23a036d0ca63fcff7ef9a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spawnEnemy</definition>
        <argsstring>(Registry &amp;registry, Behavior behavior, float x, float y, const std::string &amp;textureName, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>spawnEnemy</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="structBehavior" kindref="compound">Behavior</ref></type>
          <declname>behavior</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="17" column="6" bodyfile="src/Spawner.cpp" bodystart="7" bodyend="21" declfile="include/Spawner.hpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1afe2aa4002b6736ea7a678bd12b21645b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnBackgroundLayer</definition>
        <argsstring>(Registry &amp;registry, Behavior behavior, const std::string &amp;textureName, float velocityX, float velocityY, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>spawnBackgroundLayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="structBehavior" kindref="compound">Behavior</ref></type>
          <declname>behavior</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>velocityX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>velocityY</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="18" column="10" bodyfile="src/Spawner.cpp" bodystart="77" bodyend="89" declfile="include/Spawner.hpp" declline="18" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1a9085dd83cda8ce95f48ff46a20bd46e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnPlayer</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect)</argsstring>
        <name>spawnPlayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="19" column="10" bodyfile="src/Spawner.cpp" bodystart="110" bodyend="167" declfile="include/Spawner.hpp" declline="19" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1a003a983499bb55fe73ef92c22b59d855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnAnimatedEntity</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect, const MyVector2 &amp;scale, const std::string &amp;textureName, float posX, float posY)</argsstring>
        <name>spawnAnimatedEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="20" column="10" bodyfile="src/Spawner.cpp" bodystart="168" bodyend="183" declfile="include/Spawner.hpp" declline="20" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1aa55deaadefdb7fb02964820ec661555f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnGameConfig</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnGameConfig</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="21" column="10" bodyfile="src/Spawner.cpp" bodystart="185" bodyend="189" declfile="include/Spawner.hpp" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1ad7376e4492588e32c2035b007df074f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnThruster</definition>
        <argsstring>(Registry &amp;registry, entity_t parentEntity)</argsstring>
        <name>spawnThruster</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>entity_t</type>
          <declname>parentEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="22" column="10" declfile="include/Spawner.hpp" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1a3afff98a5abaa57642b51ead9e998927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnNoneLocalPlayer</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect)</argsstring>
        <name>spawnNoneLocalPlayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="23" column="10" bodyfile="src/Spawner.cpp" bodystart="207" bodyend="261" declfile="include/Spawner.hpp" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1a002ee4c9b8ad897097e4d0487f03c72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnServerEntity</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnServerEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="24" column="10" bodyfile="src/Spawner.cpp" bodystart="192" bodyend="198" declfile="include/Spawner.hpp" declline="24" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1a5c11df13ccda012872f488f15e6ca63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnClientEntity</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnClientEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="25" column="10" bodyfile="src/Spawner.cpp" bodystart="200" bodyend="205" declfile="include/Spawner.hpp" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8hpp_1a9a3d83213993b804d030497755907530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t FFTSpawnEnemy</definition>
        <argsstring>(Registry &amp;registry, const std::string &amp;behavior_id, float x, float y, const std::string &amp;textureName, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>FFTSpawnEnemy</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>behavior_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Spawner.hpp" line="26" column="10" bodyfile="src/Spawner.cpp" bodystart="23" bodyend="75" declfile="include/Spawner.hpp" declline="26" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>ECS</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>Spawner</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SPAWNER_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPAWNER_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Registry.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Component.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SparseArray.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Entity.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TextureManager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Behaviour.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spawnEnemy(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref><sp/>behavior,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">entity_t<sp/>spawnBackgroundLayer(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref><sp/>behavior,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityY,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">entity_t<sp/>spawnPlayer(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>rect);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">entity_t<sp/>spawnAnimatedEntity(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posY);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">entity_t<sp/>spawnGameConfig(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">entity_t<sp/>spawnThruster(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/>entity_t<sp/>parentEntity);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">entity_t<sp/>spawnNoneLocalPlayer(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>rect);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">entity_t<sp/>spawnServerEntity(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">entity_t<sp/>spawnClientEntity(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">entity_t<sp/>FFTSpawnEnemy(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>behavior_id,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>&amp;<sp/>textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref>&amp;<sp/>scale)<sp/>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!SPAWNER_HPP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/Spawner.hpp"/>
  </compounddef>
</doxygen>
