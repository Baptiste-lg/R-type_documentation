<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classVelocitySystem" kind="class" language="C++" prot="public">
    <compoundname>VelocitySystem</compoundname>
    <basecompoundref refid="classISystem" prot="public" virt="non-virtual">ISystem&lt; Position, Velocity &gt;</basecompoundref>
    <includes refid="VelocitySystem_8hpp" local="no">VelocitySystem.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classVelocitySystem_1a83354aa89343ffb85f08b7d318b614b9" prot="private" static="no" mutable="no">
        <type>float &amp;</type>
        <definition>float&amp; VelocitySystem::deltaTime</definition>
        <argsstring></argsstring>
        <name>deltaTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="43" column="11" bodyfile="include/System/VelocitySystem.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVelocitySystem_1a9d528b55e75a8607568c3891d191898a" prot="private" static="no" mutable="no">
        <type>std::queue&lt; <ref refid="structEvent" kindref="compound">Event</ref> &gt;</type>
        <definition>std::queue&lt;Event&gt; VelocitySystem::heartBeatEvents</definition>
        <argsstring></argsstring>
        <name>heartBeatEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="44" column="16" bodyfile="include/System/VelocitySystem.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVelocitySystem_1a8657c2186a741dc63ce6d6ffa65211a1" prot="private" static="no" mutable="no">
        <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
        <definition>Registry&amp; VelocitySystem::registry</definition>
        <argsstring></argsstring>
        <name>registry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="45" column="14" bodyfile="include/System/VelocitySystem.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classVelocitySystem_1af18544cbfbee5e23a66f557aae93aea6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>std::string const</type>
        <definition>std::string const VelocitySystem::getSystemName</definition>
        <argsstring>() override</argsstring>
        <name>getSystemName</name>
        <reimplements refid="classISystemBase_1a68bd336682af94d8e0fc5a191b83e616">getSystemName</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="48" column="23" bodyfile="include/System/VelocitySystem.hpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classVelocitySystem_1a1766fd7bba0c2127361cf2ae4bead0f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VelocitySystem::VelocitySystem</definition>
        <argsstring>(float &amp;deltaTime, Registry &amp;registry)</argsstring>
        <name>VelocitySystem</name>
        <param>
          <type>float &amp;</type>
          <declname>deltaTime</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="51" column="5" bodyfile="include/System/VelocitySystem.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classVelocitySystem_1a3af1a4d00411d302f73452cf66a59b04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPosition" kindref="compound">Position</ref></type>
        <definition>Position VelocitySystem::interpolate</definition>
        <argsstring>(const Position &amp;previous, const Position &amp;current, float alpha)</argsstring>
        <name>interpolate</name>
        <param>
          <type>const <ref refid="structPosition" kindref="compound">Position</ref> &amp;</type>
          <declname>previous</declname>
        </param>
        <param>
          <type>const <ref refid="structPosition" kindref="compound">Position</ref> &amp;</type>
          <declname>current</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="57" column="14" bodyfile="include/System/VelocitySystem.hpp" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classVelocitySystem_1a7f435c8be5def1dee746d007814001e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VelocitySystem::operator()</definition>
        <argsstring>(entity_t entity, sparse_array&lt; Position &gt; &amp;positions, sparse_array&lt; Velocity &gt; &amp;velocities) override</argsstring>
        <name>operator()</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref>&lt; <ref refid="structPosition" kindref="compound">Position</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref>&lt; <ref refid="structVelocity" kindref="compound">Velocity</ref> &gt; &amp;</type>
          <declname>velocities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="64" column="10" bodyfile="include/System/VelocitySystem.hpp" bodystart="64" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classVelocitySystem_1a4f08bf85752866928195e888acd65a20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void VelocitySystem::PostUpdate</definition>
        <argsstring>() override</argsstring>
        <name>PostUpdate</name>
        <reimplements refid="classISystemBase_1a15450364e9f21ebae6e2633eef35d7d5">PostUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/System/VelocitySystem.hpp" line="89" column="10" bodyfile="include/System/VelocitySystem.hpp" bodystart="89" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classVelocitySystem" kindref="compound">VelocitySystem</ref> handles moving entities based on their <ref refid="structVelocity" kindref="compound">Velocity</ref> component.</para>
<para>Each frame, it updates an entity&apos;s <ref refid="structPosition" kindref="compound">Position</ref> by adding its <ref refid="structVelocity" kindref="compound">Velocity</ref> scaled by deltaTime.</para>
<para>Usage:<itemizedlist>
<listitem><para>Add <ref refid="structVelocity" kindref="compound">Velocity</ref> component to make an entity move.</para>
</listitem><listitem><para><ref refid="structVelocity" kindref="compound">Velocity</ref> is scaled by deltaTime for frame rate independence.</para>
</listitem></itemizedlist>
</para>
<para>Components:<itemizedlist>
<listitem><para><ref refid="structPosition" kindref="compound">Position</ref>: Updated each frame based on <ref refid="structVelocity" kindref="compound">Velocity</ref>.</para>
</listitem><listitem><para><ref refid="structVelocity" kindref="compound">Velocity</ref>: Defines the movement vector.</para>
</listitem></itemizedlist>
</para>
<para>Methods:<itemizedlist>
<listitem><para>operator(): Applies velocity to position each frame.</para>
</listitem></itemizedlist>
</para>
<para>Movement:<itemizedlist>
<listitem><para>Get <ref refid="structVelocity" kindref="compound">Velocity</ref> and <ref refid="structPosition" kindref="compound">Position</ref> components.</para>
</listitem><listitem><para>Scale <ref refid="structVelocity" kindref="compound">Velocity</ref> by deltaTime.</para>
</listitem><listitem><para>Offset <ref refid="structPosition" kindref="compound">Position</ref> by scaled <ref refid="structVelocity" kindref="compound">Velocity</ref>.</para>
</listitem><listitem><para>Clamp <ref refid="structPosition" kindref="compound">Position</ref> to prevent going offscreen. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>VelocitySystem</label>
        <link refid="classVelocitySystem"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ISystem&lt; Position, Velocity &gt;</label>
        <link refid="classISystem"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ISystemBase</label>
        <link refid="classISystemBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>VelocitySystem</label>
        <link refid="classVelocitySystem"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ISystem&lt; Position, Velocity &gt;</label>
        <link refid="classISystem"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ISystemBase</label>
        <link refid="classISystemBase"/>
      </node>
    </collaborationgraph>
    <location file="include/System/VelocitySystem.hpp" line="41" column="1" bodyfile="include/System/VelocitySystem.hpp" bodystart="41" bodyend="123"/>
    <listofallmembers>
      <member refid="classVelocitySystem_1a83354aa89343ffb85f08b7d318b614b9" prot="private" virt="non-virtual"><scope>VelocitySystem</scope><name>deltaTime</name></member>
      <member refid="classVelocitySystem_1af18544cbfbee5e23a66f557aae93aea6" prot="public" virt="virtual"><scope>VelocitySystem</scope><name>getSystemName</name></member>
      <member refid="classVelocitySystem_1a9d528b55e75a8607568c3891d191898a" prot="private" virt="non-virtual"><scope>VelocitySystem</scope><name>heartBeatEvents</name></member>
      <member refid="classVelocitySystem_1a3af1a4d00411d302f73452cf66a59b04" prot="public" virt="non-virtual"><scope>VelocitySystem</scope><name>interpolate</name></member>
      <member refid="classVelocitySystem_1a7f435c8be5def1dee746d007814001e2" prot="public" virt="non-virtual"><scope>VelocitySystem</scope><name>operator()</name></member>
      <member refid="classISystem_1a31573ab1dbe256ad82453452bc1a76b8" prot="public" virt="pure-virtual" ambiguityscope="ISystem&lt; Position, Velocity &gt;::"><scope>VelocitySystem</scope><name>operator()</name></member>
      <member refid="classVelocitySystem_1a4f08bf85752866928195e888acd65a20" prot="public" virt="virtual"><scope>VelocitySystem</scope><name>PostUpdate</name></member>
      <member refid="classVelocitySystem_1a8657c2186a741dc63ce6d6ffa65211a1" prot="private" virt="non-virtual"><scope>VelocitySystem</scope><name>registry</name></member>
      <member refid="classVelocitySystem_1a1766fd7bba0c2127361cf2ae4bead0f4" prot="public" virt="non-virtual"><scope>VelocitySystem</scope><name>VelocitySystem</name></member>
      <member refid="classISystem_1a8b403989cf1780ab99f91272b3098648" prot="public" virt="virtual"><scope>VelocitySystem</scope><name>~ISystem</name></member>
      <member refid="classISystemBase_1ae71b84b72f1d4eab3f8acdf50d5ee540" prot="public" virt="virtual"><scope>VelocitySystem</scope><name>~ISystemBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
