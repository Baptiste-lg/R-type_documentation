<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="BeatmapPanel_8cpp" kind="file" language="C++">
    <compoundname>BeatmapPanel.cpp</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="BeatmapPanel_8cpp_1af8c1cb1cfce507e87bfc24eba342ff4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void adjustDifficultyUserMinus</definition>
        <argsstring>(int *difficultyUser, sf::Text *textDifficultyUser)</argsstring>
        <name>adjustDifficultyUserMinus</name>
        <param>
          <type>int *</type>
          <declname>difficultyUser</declname>
        </param>
        <param>
          <type>sf::Text *</type>
          <declname>textDifficultyUser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BeatmapPanel.cpp</para>
<para>This file implements the <ref refid="classBeatmapPanel" kindref="compound">BeatmapPanel</ref> class which represents a panel displaying information about a beatmap.</para>
<para>Methods:</para>
<para><itemizedlist>
<listitem><para><ref refid="classBeatmapPanel" kindref="compound">BeatmapPanel()</ref> Default constructor.</para>
</listitem><listitem><para><ref refid="classBeatmapPanel" kindref="compound">BeatmapPanel()</ref> Constructor taking textures, position, resolution, <ref refid="classBeatmapConfig" kindref="compound">BeatmapConfig</ref>, and font. Calculates screen position. Sets up sprites and text.</para>
</listitem><listitem><para>~BeatmapPanel() Destructor.</para>
</listitem><listitem><para>draw() Draws the panel sprites and text.</para>
</listitem><listitem><para>setText() Sets the text of the panel.</para>
</listitem><listitem><para>adjustPanel() Adjusts the panel sprite.</para>
</listitem><listitem><para>adjustCover() Adjusts the cover sprite.</para>
</listitem><listitem><para>adjustGrade() Adjusts the grade text.</para>
</listitem><listitem><para>adjust() Adjusts position, scale, opacity of the panel, cover, and text.</para>
</listitem></itemizedlist>
</para>
<para>Members:</para>
<para><itemizedlist>
<listitem><para>sprites Stores sprites like panel and cover.</para>
</listitem><listitem><para>texts Stores text elements like title and artist.</para>
</listitem><listitem><para>buttons Stores UI buttons.</para>
</listitem><listitem><para>difficultyUser Stores selected difficulty level.</para>
</listitem><listitem><para>folderPath Stores beatmap folder path. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GraphicElement/BeatmapPanel.cpp" line="211" column="6" bodyfile="src/GraphicElement/BeatmapPanel.cpp" bodystart="211" bodyend="218" declfile="src/GraphicElement/BeatmapPanel.cpp" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="BeatmapPanel_8cpp_1acc39ac6e5a22ee4b89d304a2c29e34d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void adjustDifficultyUserPlus</definition>
        <argsstring>(int *difficultyUser, sf::Text *textDifficultyUser)</argsstring>
        <name>adjustDifficultyUserPlus</name>
        <param>
          <type>int *</type>
          <declname>difficultyUser</declname>
        </param>
        <param>
          <type>sf::Text *</type>
          <declname>textDifficultyUser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GraphicElement/BeatmapPanel.cpp" line="202" column="6" bodyfile="src/GraphicElement/BeatmapPanel.cpp" bodystart="202" bodyend="209" declfile="src/GraphicElement/BeatmapPanel.cpp" declline="66" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2023</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Rtype</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>beatmappanell.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GraphicElement/BeatmapPanel.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustDifficultyUserMinus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>difficultyUser,<sp/>sf::Text<sp/>*<sp/>textDifficultyUser);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustDifficultyUserPlus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>difficultyUser,<sp/>sf::Text<sp/>*<sp/>textDifficultyUser);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">BeatmapPanel::BeatmapPanel(){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">BeatmapPanel::BeatmapPanel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Texture&amp;<sp/>texturePanel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Texture&amp;<sp/>textureArrowLeft,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Texture&amp;<sp/>textureArrowRight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Texture&amp;<sp/>textureCover,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Vector2f&amp;<sp/>position,<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBeatmapConfig" kindref="compound">BeatmapConfig</ref>&amp;<sp/>beatmapConfig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Font&amp;<sp/>fonts)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>the<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normalizedX<sp/>=<sp/>std::fmod(position.x,<sp/>10.0f)<sp/>/<sp/>10.0f;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normalizedY<sp/>=<sp/>std::fmod(position.y,<sp/>10.0f)<sp/>/<sp/>10.0f;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;difficultyUser<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>screen<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenX<sp/>=<sp/>normalizedX<sp/>*<sp/>res.first<sp/>-<sp/>texturePanel.getSize().x<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenY<sp/>=<sp/>normalizedY<sp/>*<sp/>res.second<sp/>-<sp/>texturePanel.getSize().y<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>grade<sp/>is<sp/>a<sp/>text<sp/>displayed<sp/>on<sp/>the<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//load<sp/>font<sp/>&quot;asset/Fonts/sansation.ttf&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>textSize<sp/>=<sp/>35;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>starting<sp/>position<sp/>for<sp/>the<sp/>text<sp/>based<sp/>on<sp/>the<sp/>cover&apos;s<sp/>right<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>textStartX<sp/>=<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().x<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>10<sp/>is<sp/>a<sp/>margin,<sp/>adjust<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>textStartY<sp/>=<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().y;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>text<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].setFont(fonts);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].setCharacterSize(20);<sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].setString(</highlight><highlight class="stringliteral">&quot;Title<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>beatmapConfig.getName());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].setPosition(textStartX,<sp/>textStartY);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].setFont(fonts);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].setCharacterSize(20);<sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].setString(</highlight><highlight class="stringliteral">&quot;Artist<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>beatmapConfig.getArtist());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].setPosition(textStartX,<sp/>textStartY<sp/>+<sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].getGlobalBounds().height<sp/>+<sp/>5);<sp/></highlight><highlight class="comment">//<sp/>5<sp/>is<sp/>spacing<sp/>between<sp/>texts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].setFont(fonts);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].setCharacterSize(20);<sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].setString(</highlight><highlight class="stringliteral">&quot;Difficulty<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(beatmapConfig.getDifficulty()));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].setPosition(textStartX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].getGlobalBounds().height<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].setFont(fonts);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].setCharacterSize(20);<sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>stringDifficultyUser<sp/>=<sp/>std::to_string(this-&gt;difficultyUser);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].setString(</highlight><highlight class="stringliteral">&quot;Difficulty<sp/>selected<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>stringDifficultyUser);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].setPosition(textStartX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].getGlobalBounds().height<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;grade&quot;</highlight><highlight class="normal">].setFont(fonts);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;grade&quot;</highlight><highlight class="normal">].setCharacterSize(20);<sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;grade&quot;</highlight><highlight class="normal">].setString(</highlight><highlight class="stringliteral">&quot;Grade<sp/>:<sp/>S&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;grade&quot;</highlight><highlight class="normal">].setPosition(textStartX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].getGlobalBounds().height<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].setTexture(texturePanel);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].setPosition(screenX,<sp/>screenY);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>buttonConfigs[</highlight><highlight class="stringliteral">&quot;ArrowLeft&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;ArrowLeft&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](){<sp/>adjustDifficultyUserMinus(&amp;this-&gt;difficultyUser,<sp/>&amp;this-&gt;texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">]);}};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>buttonConfigs[</highlight><highlight class="stringliteral">&quot;ArrowRight&quot;</highlight><highlight class="normal">]<sp/>={</highlight><highlight class="stringliteral">&quot;ArrowRight&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](){<sp/>adjustDifficultyUserPlus(&amp;this-&gt;difficultyUser,<sp/>&amp;this-&gt;texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">]);}};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;position<sp/>=<sp/>sf::Vector2f(screenX,<sp/>screenY);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>the<sp/>cover<sp/>is<sp/>a<sp/>smaller<sp/>sprite<sp/>displayed<sp/>on<sp/>the<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>rectangle<sp/>to<sp/>240x240<sp/>if<sp/>the<sp/>texture<sp/>is<sp/>not<sp/>240x240<sp/>than<sp/>resize<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].setTexture(textureCover);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].setPosition(position);<sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>this<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//button</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>arrowLeftX<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>arrowLeftY<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>buttons.emplace(</highlight><highlight class="stringliteral">&quot;ArrowLeft&quot;</highlight><highlight class="normal">,<sp/><ref refid="classButton" kindref="compound">Button</ref>(textureArrowLeft,<sp/>sf::Vector2f(arrowLeftX,<sp/>arrowLeftY),<sp/>buttonConfigs[</highlight><highlight class="stringliteral">&quot;ArrowLeft&quot;</highlight><highlight class="normal">].onClick,<sp/>std::pair&lt;int,<sp/>int&gt;(1920,<sp/>1080)));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>buttons[</highlight><highlight class="stringliteral">&quot;ArrowLeft&quot;</highlight><highlight class="normal">].setText(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>fonts,<sp/>20);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>buttons.emplace(</highlight><highlight class="stringliteral">&quot;ArrowRight&quot;</highlight><highlight class="normal">,<sp/><ref refid="classButton" kindref="compound">Button</ref>(textureArrowRight,<sp/>sf::Vector2f(arrowLeftX<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;arrowLeft&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>10,<sp/>arrowLeftY),<sp/>buttonConfigs[</highlight><highlight class="stringliteral">&quot;ArrowRight&quot;</highlight><highlight class="normal">].onClick,<sp/>std::pair&lt;int,<sp/>int&gt;(1920,<sp/>1080)));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>buttons[</highlight><highlight class="stringliteral">&quot;ArrowRight&quot;</highlight><highlight class="normal">].setText(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>fonts,<sp/>20);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>folderPath<sp/>=<sp/>beatmapConfig.getFolderPath();</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">BeatmapPanel::~BeatmapPanel(){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::draw(sf::RenderWindow&amp;<sp/>window)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>button<sp/>:<sp/>buttons)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>button.second.draw(window);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>window.draw(texts[</highlight><highlight class="stringliteral">&quot;grade&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::setText(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Font&amp;<sp/>font,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterSize)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::adjustPanel(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opacity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Vector2f&amp;<sp/>offset,<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::adjustCover(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opacity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Vector2f&amp;<sp/>offset,<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::adjustGrade(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opacity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Vector2f&amp;<sp/>offset,<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::adjust(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opacity,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Vector2f&amp;<sp/>offset,<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>need<sp/>to<sp/>split<sp/>the<sp/>res<sp/>by<sp/>10<sp/>to<sp/>get<sp/>the<sp/>real<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenOffsetX<sp/>=<sp/>std::fmod(offset.x,<sp/>10.0f)<sp/>/<sp/>10.0f<sp/>*<sp/>res.first;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenOffsetY<sp/>=<sp/>std::fmod(offset.y,<sp/>10.0f)<sp/>/<sp/>10.0f<sp/>*<sp/>res.second;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PercentX<sp/>=<sp/>res.first<sp/>/<sp/>100.0f;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>PercentY<sp/>=<sp/>res.second<sp/>/<sp/>100.0f;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].setScale(scale,<sp/>scale);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].setColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>opacity));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>screenOffsetX<sp/>=<sp/>screenOffsetX<sp/>-<sp/>(sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].getTexture()-&gt;getSize().x<sp/>*<sp/>scale)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>screenOffsetY<sp/>=<sp/>screenOffsetY<sp/>-<sp/>(sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].getTexture()-&gt;getSize().y<sp/>*<sp/>scale)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;panel&quot;</highlight><highlight class="normal">].setPosition(screenOffsetX,<sp/>screenOffsetY);<sp/></highlight><highlight class="comment">//<sp/>Also<sp/>set<sp/>the<sp/>position<sp/>to<sp/>the<sp/>screen<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>the<sp/>cover<sp/>and<sp/>text<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].setScale(scale,<sp/>scale);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].setColor(sf::Color(255,<sp/>255,<sp/>255,<sp/>opacity));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].setPosition(screenOffsetX<sp/>+<sp/>PercentX<sp/>*<sp/>5,<sp/>screenOffsetY<sp/>+<sp/>PercentY<sp/>*<sp/>5);<sp/></highlight><highlight class="comment">//<sp/>Also<sp/>set<sp/>the<sp/>position<sp/>to<sp/>the<sp/>screen<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>text<sp/>:<sp/>texts)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text.second.setCharacterSize(textSize<sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].setPosition(sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().x<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>PercentX,<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().y);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].setPosition(sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().x<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>PercentX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>PercentY<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].setPosition(sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().x<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>PercentX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;artist&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>PercentY<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].setPosition(sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().x<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>PercentX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>PercentY<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;grade&quot;</highlight><highlight class="normal">].setPosition(sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getPosition().x<sp/>+<sp/>sprites[</highlight><highlight class="stringliteral">&quot;cover&quot;</highlight><highlight class="normal">].getGlobalBounds().width<sp/>+<sp/>PercentX,<sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty_user&quot;</highlight><highlight class="normal">].getPosition().y<sp/>+<sp/>PercentY<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::adjustDifficulty(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>difficulty)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>difficultyText<sp/>or<sp/>any<sp/>other<sp/>required<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>texts[</highlight><highlight class="stringliteral">&quot;difficulty&quot;</highlight><highlight class="normal">].setString(</highlight><highlight class="stringliteral">&quot;Difficulty<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(difficulty));</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustDifficultyUserPlus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>difficultyUser,<sp/>sf::Text<sp/>*<sp/>difficultyUserText)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>difficultyText<sp/>or<sp/>any<sp/>other<sp/>required<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>*difficultyUser<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*difficultyUser<sp/>&gt;<sp/>10)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*difficultyUser<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>stringDifficultyUser<sp/>=<sp/>std::to_string(*difficultyUser);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>difficultyUserText-&gt;setString(</highlight><highlight class="stringliteral">&quot;Difficulty<sp/>selected<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>stringDifficultyUser);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustDifficultyUserMinus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>difficultyUser,<sp/>sf::Text<sp/>*<sp/>difficultyUserText)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>difficultyText<sp/>or<sp/>any<sp/>other<sp/>required<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>*difficultyUser<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*difficultyUser<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*difficultyUser<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>stringDifficultyUser<sp/>=<sp/>std::to_string(*difficultyUser);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>difficultyUserText-&gt;setString(</highlight><highlight class="stringliteral">&quot;Difficulty<sp/>selected<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>stringDifficultyUser);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BeatmapPanel::handleEvent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::Event&amp;<sp/>event,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sf::RenderWindow&amp;<sp/>window)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>button<sp/>:<sp/>buttons)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>button.second.handleEvent(event,<sp/>window);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BeatmapPanel::getDifficultyUser()<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;difficultyUser;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="231"><highlight class="comment">void<sp/>BeatmapPanel::handleButtonClick(const<sp/>sf::Vector2f&amp;<sp/>mousePosition)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(leftArrowButton.isClicked(mousePosition))<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(currentDifficulty<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentDifficulty--;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>the<sp/>difficultyText<sp/>or<sp/>any<sp/>other<sp/>required<sp/>elements</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(rightArrowButton.isClicked(mousePosition))<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(currentDifficulty<sp/>&lt;<sp/>MAX_DIFFICULTY)<sp/>{<sp/><sp/>//<sp/>Assuming<sp/>MAX_DIFFICULTY<sp/>is<sp/>a<sp/>defined<sp/>constant<sp/>or<sp/>you<sp/>can<sp/>replace<sp/>with<sp/>the<sp/>desired<sp/>value</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentDifficulty++;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>the<sp/>difficultyText<sp/>or<sp/>any<sp/>other<sp/>required<sp/>elements</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="comment">}</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/GraphicElement/BeatmapPanel.cpp"/>
  </compounddef>
</doxygen>
