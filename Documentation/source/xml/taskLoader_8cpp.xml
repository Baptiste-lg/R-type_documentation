<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="taskLoader_8cpp" kind="file" language="C++">
    <compoundname>taskLoader.cpp</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="taskLoader_8cpp_1a39179dca3bb102632c3094af4d8e3f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void executeLoadingTasks</definition>
        <argsstring>(GUI &amp;gui, const std::vector&lt; std::function&lt; void(int &amp;)&gt;&gt; &amp;tasks)</argsstring>
        <name>executeLoadingTasks</name>
        <param>
          <type><ref refid="classGUI" kindref="compound">GUI</ref> &amp;</type>
          <declname>gui</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::function&lt; void(int &amp;)&gt;&gt; &amp;</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>taskLoader.cpp</para>
<para>This file implements the functionality to execute a list of loading tasks in a separate thread while updating a loading screen. The primary function defined is executeLoadingTasks which accepts a <ref refid="classGUI" kindref="compound">GUI</ref> object and a vector of tasks represented by std::function objects.</para>
<para>Functions:</para>
<para><itemizedlist>
<listitem><para>void executeLoadingTasks(GUI&amp; gui, const std::vector&lt;std::function&lt;void(int&amp;)&gt;&gt;&amp; tasks): This function orchestrates the execution of loading tasks and the updating of the loading screen. It creates a detached thread to execute the tasks and computes the progress as a percentage. The loading screen is updated with the progress percentage until all tasks are complete.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies:</para>
<para><itemizedlist>
<listitem><para>&quot;taskLoader.hpp&quot; for the declaration of executeLoadingTasks function.</para>
</listitem><listitem><para>&lt;thread&gt; and &lt;chrono&gt; for managing threads and sleep duration.</para>
</listitem><listitem><para>&lt;vector&gt; and &lt;functional&gt; for holding and representing the tasks.</para>
</listitem></itemizedlist>
</para>
<para>Usage:</para>
<para><itemizedlist>
<listitem><para>Create a vector of tasks where each task is a std::function&lt;void(int&amp;)&gt;.</para>
</listitem><listitem><para>Pass the <ref refid="classGUI" kindref="compound">GUI</ref> object and the vector of tasks to executeLoadingTasks.</para>
</listitem><listitem><para>The function will execute the tasks in a separate thread, updating the loading screen with the progress. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskLoader.cpp" line="37" column="6" bodyfile="src/taskLoader.cpp" bodystart="37" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Rtype</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>taskLoader.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;taskLoader.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>executeLoadingTasks(<ref refid="classGUI" kindref="compound">GUI</ref>&amp;<sp/>gui,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)&gt;&gt;&amp;<sp/>tasks)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>progress<sp/>variable<sp/>to<sp/>hold<sp/>the<sp/>loading<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>progress(0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>detached<sp/>thread<sp/>to<sp/>run<sp/>the<sp/>loading<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>loadingThread([&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalTasks<sp/>=<sp/>tasks.size();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentTask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>task<sp/>:<sp/>tasks)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progress<sp/>=<sp/>(currentTask<sp/>*<sp/>100)<sp/>/<sp/>totalTasks;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task(progress);<sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTask++;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progress<sp/>=<sp/>100;<sp/><sp/></highlight><highlight class="comment">//<sp/>Loading<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>loadingThread.detach();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>loading<sp/>screen<sp/>until<sp/>all<sp/>tasks<sp/>are<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(progress<sp/>&lt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui.updateLoadingScreen(progress);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(1));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/taskLoader.cpp"/>
  </compounddef>
</doxygen>
