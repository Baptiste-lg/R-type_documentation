<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="taskLoader_8hpp" kind="file" language="C++">
    <compoundname>taskLoader.hpp</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="taskLoader_8hpp_1a39179dca3bb102632c3094af4d8e3f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void executeLoadingTasks</definition>
        <argsstring>(GUI &amp;gui, const std::vector&lt; std::function&lt; void(int &amp;)&gt;&gt; &amp;tasks)</argsstring>
        <name>executeLoadingTasks</name>
        <param>
          <type><ref refid="classGUI" kindref="compound">GUI</ref> &amp;</type>
          <declname>gui</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::function&lt; void(int &amp;)&gt;&gt; &amp;</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>taskLoader.cpp</para>
<para>This file implements the functionality to execute a list of loading tasks in a separate thread while updating a loading screen. The primary function defined is executeLoadingTasks which accepts a <ref refid="classGUI" kindref="compound">GUI</ref> object and a vector of tasks represented by std::function objects.</para>
<para>Functions:</para>
<para><itemizedlist>
<listitem><para>void executeLoadingTasks(GUI&amp; gui, const std::vector&lt;std::function&lt;void(int&amp;)&gt;&gt;&amp; tasks): This function orchestrates the execution of loading tasks and the updating of the loading screen. It creates a detached thread to execute the tasks and computes the progress as a percentage. The loading screen is updated with the progress percentage until all tasks are complete.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies:</para>
<para><itemizedlist>
<listitem><para>&quot;taskLoader.hpp&quot; for the declaration of executeLoadingTasks function.</para>
</listitem><listitem><para>&lt;thread&gt; and &lt;chrono&gt; for managing threads and sleep duration.</para>
</listitem><listitem><para>&lt;vector&gt; and &lt;functional&gt; for holding and representing the tasks.</para>
</listitem></itemizedlist>
</para>
<para>Usage:</para>
<para><itemizedlist>
<listitem><para>Create a vector of tasks where each task is a std::function&lt;void(int&amp;)&gt;.</para>
</listitem><listitem><para>Pass the <ref refid="classGUI" kindref="compound">GUI</ref> object and the vector of tasks to executeLoadingTasks.</para>
</listitem><listitem><para>The function will execute the tasks in a separate thread, updating the loading screen with the progress. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/taskLoader.hpp" line="34" column="6" bodyfile="src/taskLoader.cpp" bodystart="37" bodyend="57" declfile="include/taskLoader.hpp" declline="34" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Rtype</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>taskLoader</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TASKLOADER_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TASKLOADER_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Component.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SparseArray.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GUI/GUI.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>executeLoadingTasks(<ref refid="classGUI" kindref="compound">GUI</ref>&amp;<sp/>gui,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)&gt;&gt;&amp;<sp/>tasks);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!TASKLOADER_HPP_*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/taskLoader.hpp"/>
  </compounddef>
</doxygen>
