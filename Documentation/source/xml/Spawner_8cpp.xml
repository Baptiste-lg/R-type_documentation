<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Spawner_8cpp" kind="file" language="C++">
    <compoundname>Spawner.cpp</compoundname>
    <includes refid="Spawner_8hpp" local="yes">Spawner.hpp</includes>
    <includes refid="Global_8hpp" local="yes">Global.hpp</includes>
    <incdepgraph>
      <node id="33">
        <label>valarray</label>
      </node>
      <node id="15">
        <label>netinet/in.h</label>
      </node>
      <node id="17">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="41">
        <label>queue</label>
      </node>
      <node id="28">
        <label>filesystem</label>
      </node>
      <node id="34">
        <label>cmath</label>
      </node>
      <node id="36">
        <label>numeric</label>
      </node>
      <node id="19">
        <label>string</label>
      </node>
      <node id="27">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="4">
        <label>Registry.hpp</label>
        <link refid="Registry_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>map</label>
      </node>
      <node id="45">
        <label>unordered_set</label>
      </node>
      <node id="39">
        <label>fftw3.h</label>
      </node>
      <node id="1">
        <label>src/Spawner.cpp</label>
        <link refid="Spawner_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>GameState.hpp</label>
        <link refid="GameState_8hpp_source"/>
      </node>
      <node id="49">
        <label>Global.hpp</label>
        <link refid="Global_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>any</label>
      </node>
      <node id="26">
        <label>TextureManager.hpp</label>
        <link refid="TextureManager_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>condition_variable</label>
      </node>
      <node id="10">
        <label>SparseArray.hpp</label>
        <link refid="SparseArray_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>Behaviour.hpp</label>
        <link refid="Behaviour_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tuple</label>
      </node>
      <node id="44">
        <label>future</label>
      </node>
      <node id="12">
        <label>optional</label>
      </node>
      <node id="40">
        <label>ThreadPool.hpp</label>
        <link refid="ThreadPool_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="37">
        <label>array</label>
      </node>
      <node id="24">
        <label>Component.hpp</label>
        <link refid="Component_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Event.hpp</label>
        <link refid="Event_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="23">
        <label>cstddef</label>
      </node>
      <node id="29">
        <label>Database/Database.hpp</label>
        <link refid="Database_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
      <node id="47">
        <label>shared_mutex</label>
      </node>
      <node id="13">
        <label>mutex</label>
      </node>
      <node id="46">
        <label>chrono</label>
      </node>
      <node id="16">
        <label>../include/System/ISystem.hpp</label>
        <link refid="ISystem_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>thread</label>
      </node>
      <node id="2">
        <label>Spawner.hpp</label>
        <link refid="Spawner_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Beatmap/BeatmapConfig.hpp</label>
        <link refid="BeatmapConfig_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>set</label>
      </node>
      <node id="32">
        <label>complex</label>
      </node>
      <node id="35">
        <label>algorithm</label>
      </node>
      <node id="50">
        <label>stdio.h</label>
      </node>
      <node id="25">
        <label>libconfig.h++</label>
      </node>
      <node id="20">
        <label>memory</label>
      </node>
      <node id="6">
        <label>typeindex</label>
      </node>
      <node id="22">
        <label>Entity.hpp</label>
        <link refid="Entity_8hpp_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="Spawner_8cpp_1a4f7c5c7b8633696d14157e02591bd39b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t FFTSpawnEnemy</definition>
        <argsstring>(Registry &amp;registry, const std::string &amp;behavior_id, float x, float y, const std::string &amp;textureName, const MyRect &amp;textureRect, const MyVector2 &amp;scale, int &amp;SyncId)</argsstring>
        <name>FFTSpawnEnemy</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>behavior_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>SyncId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spawner.cpp</para>
<para>This file defines various functions to spawn different types of entities into the game. Each function encapsulates the creation of a specific type of entity, setting up its components and properties.</para>
<para>Functions:</para>
<para><itemizedlist>
<listitem><para>FFTSpawnEnemy(<ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const std::string &amp;behavior_id, float x, float y, const std::string &amp;textureName, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;textureRect, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;scale, int&amp; SyncId): This function creates an enemy entity with specified parameters, setting up its behavior, position, and appearance.</para>
</listitem><listitem><para>spawnBackgroundLayer(<ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, <ref refid="structBehavior" kindref="compound">Behavior</ref> behavior, const std::string &amp;textureName, float velocityX, float velocityY, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;textureRect, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;scale): This function creates a background layer entity with specified parameters, setting up its behavior and appearance.</para>
</listitem><listitem><para>spawnThruster(Registry &amp;registry, entity_t parentEntity, float xOffset, float yOffset): This function creates a thruster entity attached to a parent entity at a specified offset.</para>
</listitem><listitem><para>spawnAnimatedEntity(<ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;rect, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;scale, const std::string &amp;textureName, float posX, float posY): This function creates an animated entity with specified parameters, setting up its position, appearance, and animation.</para>
</listitem><listitem><para>spawnState(Registry &amp;registry): This function creates a state entity to hold game configuration and settings.</para>
</listitem><listitem><para>spawnServerEntity(Registry &amp;registry): This function creates a server entity to manage network communications.</para>
</listitem><listitem><para>spawnClientEntity(Registry &amp;registry): This function creates a client entity to manage client-side game state.</para>
</listitem><listitem><para>spawnNoneLocalPlayer(Registry &amp;registry, const MyRect &amp;rect): This function creates a non-local player entity with specified parameters, setting up its position and appearance.</para>
</listitem><listitem><para>spawnButton(<ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;rect, const std::string &amp;textureName, const std::string &amp;text, const std::string &amp;fontName, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;scale, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;textOffset, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;textScale, std::function&lt;void()&gt; onClick, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;position): This function creates a button entity with specified parameters, setting up its appearance and click behavior.</para>
</listitem><listitem><para>spawnFollowerCover(entity_t parent_entity, <ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;rect, const string &amp;textureName, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;offset): This function creates a follower cover entity attached to a parent entity, with specified appearance and offset.</para>
</listitem><listitem><para>spawnFollowerSkin(entity_t parent_entity, <ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;rect, const string &amp;textureName, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;offset): This function creates a follower skin entity attached to a parent entity, with specified appearance and offset.</para>
</listitem><listitem><para>spawnFollowerText(entity_t parent_entity, <ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const std::string &amp;Title, const float Xoffset, const float Yoffset): This function creates a follower text entity attached to a parent entity, with specified text and offset.</para>
</listitem><listitem><para>spawnFollowerText(entity_t parent_entity, <ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const std::string &amp;Title, const float Xoffset, const float Yoffset, unsigned int&amp; fontSize): This function creates a follower text entity attached to a parent entity, with specified text, offset and font size.</para>
</listitem><listitem><para>spawnBeatmapPanel(Registry &amp;registry, Database &amp;database, const int &amp;index): This function creates a beatmap panel entity with specified parameters, setting up its appearance and content.</para>
</listitem><listitem><para>spawnDrawable(<ref refid="classRegistry" kindref="compound">Registry</ref> &amp;registry, const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;rect, const std::string &amp;textureName, const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;scale, float posX, float posY, float depth): This function creates a drawable entity with specified parameters, setting up its position and appearance.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies:</para>
<para><itemizedlist>
<listitem><para>&quot;Spawner.hpp&quot; for the declarations of the spawn functions.</para>
</listitem><listitem><para>&quot;Global.hpp&quot; for global definitions and constants.</para>
</listitem><listitem><para>&lt;iostream&gt; for standard I/O operations.</para>
</listitem><listitem><para>&lt;functional&gt; for std::function. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="83" column="10" bodyfile="src/Spawner.cpp" bodystart="83" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1afe2aa4002b6736ea7a678bd12b21645b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnBackgroundLayer</definition>
        <argsstring>(Registry &amp;registry, Behavior behavior, const std::string &amp;textureName, float velocityX, float velocityY, const MyRect &amp;textureRect, const MyVector2 &amp;scale)</argsstring>
        <name>spawnBackgroundLayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="structBehavior" kindref="compound">Behavior</ref></type>
          <declname>behavior</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>velocityX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>velocityY</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>textureRect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="100" column="10" bodyfile="src/Spawner.cpp" bodystart="100" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1acaa5186bd03bceebdf1bd87d74304425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnThruster</definition>
        <argsstring>(Registry &amp;registry, entity_t parentEntity, float xOffset, float yOffset)</argsstring>
        <name>spawnThruster</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>entity_t</type>
          <declname>parentEntity</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="115" column="10" bodyfile="src/Spawner.cpp" bodystart="115" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a003a983499bb55fe73ef92c22b59d855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnAnimatedEntity</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect, const MyVector2 &amp;scale, const std::string &amp;textureName, float posX, float posY)</argsstring>
        <name>spawnAnimatedEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="131" column="10" bodyfile="src/Spawner.cpp" bodystart="131" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a725a6a54bac46632fd2473c55073ab6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnState</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnState</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="147" column="10" bodyfile="src/Spawner.cpp" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a002ee4c9b8ad897097e4d0487f03c72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnServerEntity</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnServerEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="156" column="10" bodyfile="src/Spawner.cpp" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a5c11df13ccda012872f488f15e6ca63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnClientEntity</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>spawnClientEntity</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="162" column="10" bodyfile="src/Spawner.cpp" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a3afff98a5abaa57642b51ead9e998927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnNoneLocalPlayer</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect)</argsstring>
        <name>spawnNoneLocalPlayer</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="168" column="10" bodyfile="src/Spawner.cpp" bodystart="168" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a804b8e80e8fc36765dfba72623fc35a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnButton</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect, const std::string &amp;textureName, const std::string &amp;text, const std::string &amp;fontName, const MyVector2 &amp;scale, const MyVector2 &amp;textOffset, const MyVector2 &amp;textScale, std::function&lt; void()&gt; onClick, const MyVector2 &amp;position)</argsstring>
        <name>spawnButton</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fontName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>textOffset</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>textScale</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>onClick</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="220" column="10" bodyfile="src/Spawner.cpp" bodystart="220" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a39aef115a30064c83648d9c4b68cae2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnFollowerCover</definition>
        <argsstring>(entity_t parent_entity, Registry &amp;registry, const MyRect &amp;rect, const string &amp;textureName, const MyVector2 &amp;offset)</argsstring>
        <name>spawnFollowerCover</name>
        <param>
          <type>entity_t</type>
          <declname>parent_entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="236" column="10" bodyfile="src/Spawner.cpp" bodystart="236" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1aa4cb6d5e617f975fcc005b04d555faed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnFollowerSkin</definition>
        <argsstring>(entity_t parent_entity, Registry &amp;registry, const MyRect &amp;rect, const string &amp;textureName, const MyVector2 &amp;offset)</argsstring>
        <name>spawnFollowerSkin</name>
        <param>
          <type>entity_t</type>
          <declname>parent_entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="246" column="10" bodyfile="src/Spawner.cpp" bodystart="246" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1a70a225f7af6f5835421b604797951dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnFollowerText</definition>
        <argsstring>(entity_t parent_entity, Registry &amp;registry, const std::string &amp;Title, const float Xoffset, const float Yoffset)</argsstring>
        <name>spawnFollowerText</name>
        <param>
          <type>entity_t</type>
          <declname>parent_entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>Title</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>Xoffset</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>Yoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="255" column="10" bodyfile="src/Spawner.cpp" bodystart="255" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1ab5eeb828f08e61e9dadfafdfce7bb4b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnFollowerText</definition>
        <argsstring>(entity_t parent_entity, Registry &amp;registry, const std::string &amp;Title, const float Xoffset, const float Yoffset, unsigned int &amp;fontSize)</argsstring>
        <name>spawnFollowerText</name>
        <param>
          <type>entity_t</type>
          <declname>parent_entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>Title</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>Xoffset</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>Yoffset</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>fontSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="265" column="10" bodyfile="src/Spawner.cpp" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1af4d4d1fa47d4efb4d0642ecdc76245a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnBeatmapPanel</definition>
        <argsstring>(Registry &amp;registry, Database &amp;database, const int &amp;index)</argsstring>
        <name>spawnBeatmapPanel</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="classDatabase" kindref="compound">Database</ref> &amp;</type>
          <declname>database</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="275" column="10" bodyfile="src/Spawner.cpp" bodystart="275" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="Spawner_8cpp_1adc4603ea5f9f81648913c558a563babd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>entity_t</type>
        <definition>entity_t spawnDrawable</definition>
        <argsstring>(Registry &amp;registry, const MyRect &amp;rect, const std::string &amp;textureName, const MyVector2 &amp;scale, float posX, float posY, float depth)</argsstring>
        <name>spawnDrawable</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const <ref refid="structMyRect" kindref="compound">MyRect</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textureName</declname>
        </param>
        <param>
          <type>const <ref refid="structMyVector2" kindref="compound">MyVector2</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>posY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Spawner.cpp" line="298" column="10" bodyfile="src/Spawner.cpp" bodystart="298" bodyend="308"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Rtype</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>Spawner.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Spawner.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Global.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">entity_t<sp/>FFTSpawnEnemy(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;behavior_id,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;scale,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>SyncId)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enemy<sp/>=<sp/>registry.queue_for_creation([=](<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/>entity_t<sp/>enemy)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{x,<sp/>y,<sp/>x,<sp/>y});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{ENEMY,<sp/>DESTROY});</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structEnemy" kindref="compound">Enemy</ref>{});</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{behavior_id});</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawable;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawable.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawable.textureRect<sp/>=<sp/>textureRect;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawable.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/>std::move(drawable));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{10.0f});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(enemy,<sp/><ref refid="structidSync" kindref="compound">idSync</ref>{SyncId});</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enemy;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">entity_t<sp/>spawnBackgroundLayer(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref><sp/>behavior,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;textureName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityY,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;textureRect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;scale)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>textureRect;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{0.0f});</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{std::move(behavior)});</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">entity_t<sp/>spawnThruster(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/>entity_t<sp/>parentEntity,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xOffset,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yOffset)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parentPos<sp/>=<sp/>registry.get_components&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parentPos[parentEntity].has_value())<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parent<sp/>entity<sp/>does<sp/>not<sp/>have<sp/>a<sp/>Position<sp/>component&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>thruster<sp/>entity<sp/>and<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>thrusterEntity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{parentPos[parentEntity]-&gt;x,<sp/>parentPos[parentEntity]-&gt;y});</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{</highlight><highlight class="stringliteral">&quot;p_thruster&quot;</highlight><highlight class="normal">,<sp/>{0,<sp/>0,<sp/>48,<sp/>48},<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{0,<sp/>3,<sp/>1.0f<sp/>/<sp/>FRAMERATE,<sp/>0.0f,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parentEntity,<sp/>xOffset,<sp/>yOffset});<sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>component<sp/>to<sp/>indicate<sp/>this<sp/>entity<sp/>follows<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(thrusterEntity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{2.0f});</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>thrusterEntity;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">entity_t<sp/>spawnAnimatedEntity(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;textureName,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posY)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{posX,<sp/>posY});</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{1.0f});</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{0,<sp/>100,<sp/>1.0f<sp/>/<sp/>FRAMERATE,<sp/>0.0f,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">entity_t<sp/>spawnState(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structState" kindref="compound">State</ref>{});</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFFT" kindref="compound">FFT</ref>{});</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structGameConfig" kindref="compound">GameConfig</ref>{1920,<sp/>1080,<sp/>100});</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">entity_t<sp/>spawnServerEntity(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structNetwork" kindref="compound">Network</ref>{});</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">entity_t<sp/>spawnClientEntity(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structState" kindref="compound">State</ref>{});</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">entity_t<sp/>spawnNoneLocalPlayer(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;rect)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;p_spaceship&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{10,<sp/>10});</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structControllable" kindref="compound">Controllable</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{3.0f});</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structHealth" kindref="compound">Health</ref>{100.0f});</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{FRIENDLY,<sp/>STOP});</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnThruster(registry,<sp/>entity,<sp/>0,<sp/>10);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addLaser<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structLaser" kindref="compound">Laser</ref>{});</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addDepth<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{3.0f});</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addDrawable<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{</highlight><highlight class="stringliteral">&quot;laserAnimated&quot;</highlight><highlight class="normal">,<sp/>{0,<sp/>0,<sp/>64,<sp/>64},<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addAnimated<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{0,<sp/>5,<sp/>3.0f<sp/>/<sp/>FRAMERATE,<sp/>0.0f,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addCollision<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{FRIENDLY_BULLET,<sp/>DESTROY});</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>addVelocity<sp/>=<sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{10,<sp/>0});</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSpawner" kindref="compound">Spawner</ref><sp/>playerSpawner{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.spawnRate<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.timeSinceLastSpawn<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.entityToSpawn<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;laserAnimated&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xOffset<sp/>=<sp/>200,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yOffset<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.xVelocity<sp/>=<sp/>1.0f,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.yVelocity<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.componentSpawners<sp/>=<sp/>{addLaser,<sp/>addDepth,<sp/>addDrawable,<sp/>addVelocity,<sp/>addAnimated,<sp/>addCollision}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structSpawner" kindref="compound">Spawner</ref>{std::move(playerSpawner)});</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">entity_t<sp/>spawnButton(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fontName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;textOffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;textScale,<sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>onClick,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;position)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{position.x,<sp/>position.y});</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{3.0f});</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>isClickable<sp/>component<sp/>with<sp/>a<sp/>lambda<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structisClickable" kindref="compound">isClickable</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>onClick});</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structTextDrawable" kindref="compound">TextDrawable</ref>{text,<sp/>fontName});</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">entity_t<sp/>spawnFollowerCover(entity_t<sp/>parent_entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;offset)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>added<sp/>to<sp/>the<sp/>beatmap<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{textureName,<sp/>rect,<sp/>{0.5f,<sp/>0.5f}});</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{2.0f});</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parent_entity,<sp/>offset.x,<sp/>offset.y});</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">entity_t<sp/>spawnFollowerSkin(entity_t<sp/>parent_entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;offset)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{textureName,<sp/>rect,<sp/>{1.0f,<sp/>1.0f}});</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{2.0f});</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parent_entity,<sp/>offset.x,<sp/>offset.y});</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">entity_t<sp/>spawnFollowerText(entity_t<sp/>parent_entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Title,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Xoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Yoffset)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>added<sp/>to<sp/>the<sp/>beatmap<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structTextDrawable" kindref="compound">TextDrawable</ref>{Title,<sp/></highlight><highlight class="stringliteral">&quot;font&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{5.0f});</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parent_entity,<sp/>Xoffset,<sp/>Yoffset});</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">entity_t<sp/>spawnFollowerText(entity_t<sp/>parent_entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;Title,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Xoffset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Yoffset,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>fontSize)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>added<sp/>to<sp/>the<sp/>beatmap<sp/>panel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structTextDrawable" kindref="compound">TextDrawable</ref>{Title,<sp/></highlight><highlight class="stringliteral">&quot;font&quot;</highlight><highlight class="normal">,<sp/>fontSize});</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{5.0f});</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parent_entity,<sp/>Xoffset,<sp/>Yoffset});</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">entity_t<sp/>spawnBeatmapPanel(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/><ref refid="classDatabase" kindref="compound">Database</ref><sp/>&amp;database,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;index)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MainPanel01&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>{0,<sp/>0,<sp/>852,<sp/>527};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>{1.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBeatmapConfig" kindref="compound">BeatmapConfig</ref><sp/>beatmap<sp/>=<sp/>database.getBeatmap(index);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>the<sp/>panel<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>screen<sp/>and<sp/>in<sp/>a<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>250;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>400<sp/>+<sp/>index<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{1.0f});</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnFollowerCover(entity,<sp/>registry,<sp/>{0,<sp/>0,<sp/>500,<sp/>500},<sp/>beatmap.getFolderPath(),<sp/>{100,<sp/>100});</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnFollowerText(entity,<sp/>registry,<sp/>beatmap.getName(),<sp/>500,<sp/>0);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnFollowerText(entity,<sp/>registry,<sp/>beatmap.getArtist(),<sp/>500,<sp/>50);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnFollowerText(entity,<sp/>registry,<sp/>std::to_string(beatmap.getDifficulty()),<sp/>500,<sp/>100);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>registry.add_component(entity,<sp/>TextDrawable{database.getBeatmap(index).getSongName(),<sp/>&quot;sansation&quot;});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">entity_t<sp/>spawnDrawable(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>&amp;rect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;textureName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMyVector2" kindref="compound">MyVector2</ref><sp/>&amp;scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posX,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>posY,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDrawable" kindref="compound">Drawable</ref><sp/>drawableComponent;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureName<sp/>=<sp/>textureName;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.textureRect<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>drawableComponent.scale<sp/>=<sp/>scale;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{posX,<sp/>posY});</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/>std::move(drawableComponent));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{depth});</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Spawner.cpp"/>
  </compounddef>
</doxygen>
