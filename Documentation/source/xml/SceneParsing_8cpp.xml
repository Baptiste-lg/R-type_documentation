<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="SceneParsing_8cpp" kind="file" language="C++">
    <compoundname>SceneParsing.cpp</compoundname>
    <includes refid="SceneParsing_8hpp" local="yes">SceneParsing.hpp</includes>
    <includes refid="Global_8hpp" local="yes">Global.hpp</includes>
    <incdepgraph>
      <node id="43">
        <label>valarray</label>
      </node>
      <node id="18">
        <label>netinet/in.h</label>
      </node>
      <node id="5">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="28">
        <label>queue</label>
      </node>
      <node id="38">
        <label>filesystem</label>
      </node>
      <node id="1">
        <label>src/SceneParsing.cpp</label>
        <link refid="SceneParsing_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>cmath</label>
      </node>
      <node id="45">
        <label>numeric</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="37">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="7">
        <label>Registry.hpp</label>
        <link refid="Registry_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>map</label>
      </node>
      <node id="32">
        <label>unordered_set</label>
      </node>
      <node id="26">
        <label>fftw3.h</label>
      </node>
      <node id="11">
        <label>GameState.hpp</label>
        <link refid="GameState_8hpp_source"/>
      </node>
      <node id="49">
        <label>Global.hpp</label>
        <link refid="Global_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>any</label>
      </node>
      <node id="36">
        <label>TextureManager.hpp</label>
        <link refid="TextureManager_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>condition_variable</label>
      </node>
      <node id="12">
        <label>SparseArray.hpp</label>
        <link refid="SparseArray_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>System/EffectsFunctions.hpp</label>
        <link refid="EffectsFunctions_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>tuple</label>
      </node>
      <node id="31">
        <label>future</label>
      </node>
      <node id="14">
        <label>optional</label>
      </node>
      <node id="27">
        <label>ThreadPool.hpp</label>
        <link refid="ThreadPool_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SceneParsing.hpp</label>
        <link refid="SceneParsing_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="23">
        <label>utility</label>
      </node>
      <node id="46">
        <label>array</label>
      </node>
      <node id="4">
        <label>Component.hpp</label>
        <link refid="Component_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Event.hpp</label>
        <link refid="Event_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="25">
        <label>cstddef</label>
      </node>
      <node id="39">
        <label>Database/Database.hpp</label>
        <link refid="Database_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="35">
        <label>shared_mutex</label>
      </node>
      <node id="15">
        <label>mutex</label>
      </node>
      <node id="33">
        <label>chrono</label>
      </node>
      <node id="19">
        <label>../include/System/ISystem.hpp</label>
        <link refid="ISystem_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>thread</label>
      </node>
      <node id="40">
        <label>Beatmap/BeatmapConfig.hpp</label>
        <link refid="BeatmapConfig_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>set</label>
      </node>
      <node id="42">
        <label>complex</label>
      </node>
      <node id="34">
        <label>algorithm</label>
      </node>
      <node id="50">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>libconfig.h++</label>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
      <node id="9">
        <label>typeindex</label>
      </node>
      <node id="24">
        <label>Entity.hpp</label>
        <link refid="Entity_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="SceneParsing_8cpp_1a36d9ec3a67612d1416c126b7a2e8cbf6" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, ComponentAdder &gt;</type>
        <definition>std::unordered_map&lt;std::string, ComponentAdder&gt; componentAdderMap</definition>
        <argsstring></argsstring>
        <name>componentAdderMap</name>
        <initializer>= {
        {&quot;Position&quot;, addPosition},
        {&quot;Velocity&quot;, addVelocity},
        {&quot;Drawable&quot;, addDrawable},
        {&quot;Collision&quot;, addCollision},
        {&quot;Acceleration&quot;, addAcceleration},
        {&quot;Animation&quot;, addAnimation},
        {&quot;GameConfig&quot;, addGameConfig},
        {&quot;Controllable&quot;, addControllable},
        {&quot;Laser&quot;, addLaser},
        {&quot;Depth&quot;, addDepth},
        {&quot;Behavior&quot;, addBehavior},
        {&quot;FFT&quot;, addFFT},
        {&quot;Spawner&quot;, addSpawner},
        {&quot;Follower&quot;, addFollower},
        {&quot;DeathEffect&quot;, addDeathEffect},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SceneParsing.cpp</para>
<para>This file includes functionality to parse and translate configurations from a file into usable in-game components. It utilizes the libconfig library to read configurations and a set of defined component adding functions to populate the game&apos;s <ref refid="classRegistry" kindref="compound">Registry</ref> with corresponding entities and components.</para>
<para>Variables:</para>
<para><itemizedlist>
<listitem><para>componentAdderMap A global unordered map associating strings representing component types to functions that know how to add these components to entities.</para>
</listitem></itemizedlist>
</para>
<para>Functions:</para>
<para><itemizedlist>
<listitem><para>getComponentAdderByName(const std::string&amp; name) This function returns a pointer to a ComponentAdder function associated with a given component name, or null if no such function is found.</para>
</listitem><listitem><para>makeAdder(entity_t parent, const std::string&amp; name, const libconfig::Setting&amp; params) A factory function to create ComponentSpawner functions for a specified component type and parameters, for a specified parent entity.</para>
</listitem><listitem><para>addPosition(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structPosition" kindref="compound">Position</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addVelocity(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structVelocity" kindref="compound">Velocity</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addCollision(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structCollision" kindref="compound">Collision</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addDrawable(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structDrawable" kindref="compound">Drawable</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addAcceleration(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds an <ref refid="structAcceleration" kindref="compound">Acceleration</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addAnimation(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds an <ref refid="structAnimation" kindref="compound">Animation</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addGameConfig(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structGameConfig" kindref="compound">GameConfig</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addControllable(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structControllable" kindref="compound">Controllable</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addLaser(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structLaser" kindref="compound">Laser</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addDepth(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structDepth" kindref="compound">Depth</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addBehavior(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structBehavior" kindref="compound">Behavior</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addFFT(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structFFT" kindref="compound">FFT</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addSpawner(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structSpawner" kindref="compound">Spawner</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addFollower(entity_t parentEntity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structFollower" kindref="compound">Follower</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>addDeathEffect(entity_t entity, Registry&amp; registry, const libconfig::Setting&amp; componentData) Adds a <ref refid="structDeathEffect" kindref="compound">DeathEffect</ref> component to a specified entity in the registry using provided data.</para>
</listitem><listitem><para>initializeGameEntitiesFromConfig(Registry &amp;registry, const std::string &amp;configFilePath) Reads a configuration file to populate the <ref refid="classRegistry" kindref="compound">Registry</ref> with entities and components as specified in the configuration.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies:</para>
<para><itemizedlist>
<listitem><para>&quot;SceneParsing.hpp&quot; for the declarations of parsing functions and component adders.</para>
</listitem><listitem><para>&quot;Global.hpp&quot; for global game settings and typedefs.</para>
</listitem><listitem><para>&lt;unordered_map&gt; for std::unordered_map.</para>
</listitem><listitem><para>&lt;iostream&gt; for standard I/O operations.</para>
</listitem><listitem><para>&lt;libconfig.h++&gt; for reading configuration files.</para>
</listitem><listitem><para>&lt;vector&gt; for std::vector.</para>
</listitem><listitem><para>&lt;string&gt; for std::string. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="95" column="20" bodyfile="src/SceneParsing.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="SceneParsing_8cpp_1a4d0bb32f9c158e0fb605036a11db93dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ComponentAdder *</type>
        <definition>ComponentAdder* getComponentAdderByName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getComponentAdderByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="113" column="16" bodyfile="src/SceneParsing.cpp" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a1c0d6699f5e26aafd7bcee11e666d903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ComponentSpawner</type>
        <definition>ComponentSpawner makeAdder</definition>
        <argsstring>(entity_t parent, const std::string &amp;name, const libconfig::Setting &amp;params)</argsstring>
        <name>makeAdder</name>
        <param>
          <type>entity_t</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="120" column="18" bodyfile="src/SceneParsing.cpp" bodystart="120" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1aae53e09d923b094be87ab2f12cf184d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addPosition</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addPosition</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SceneParsing</para>
<para>This file contains functions to parse scene config files and initialize entities.</para>
<para>Functions:</para>
<para><itemizedlist>
<listitem><para>addPosition() Adds <ref refid="structPosition" kindref="compound">Position</ref> component to entity based on config data.</para>
</listitem><listitem><para>addVelocity() Adds <ref refid="structVelocity" kindref="compound">Velocity</ref> component to entity based on config data.</para>
</listitem><listitem><para>addCollision() Adds <ref refid="structCollision" kindref="compound">Collision</ref> component to entity based on config data.</para>
</listitem><listitem><para>addDrawable() Adds <ref refid="structDrawable" kindref="compound">Drawable</ref> component to entity based on config data.</para>
</listitem><listitem><para>addAcceleration() Adds <ref refid="structAcceleration" kindref="compound">Acceleration</ref> component to entity based on config data.</para>
</listitem><listitem><para>addAnimation() Adds <ref refid="structAnimation" kindref="compound">Animation</ref> component to entity based on config data.</para>
</listitem><listitem><para>addGameConfig() Adds <ref refid="structGameConfig" kindref="compound">GameConfig</ref> component to entity based on config data.</para>
</listitem><listitem><para>addControllable() Adds <ref refid="structControllable" kindref="compound">Controllable</ref> component to entity based on config data.</para>
</listitem><listitem><para>addLaser() Adds <ref refid="structLaser" kindref="compound">Laser</ref> component to entity based on config data.</para>
</listitem><listitem><para>addDepth() Adds <ref refid="structDepth" kindref="compound">Depth</ref> component to entity based on config data.</para>
</listitem><listitem><para>addBehavior() Adds <ref refid="structBehavior" kindref="compound">Behavior</ref> component to entity based on config data.</para>
</listitem><listitem><para>addFFT() Adds <ref refid="structFFT" kindref="compound">FFT</ref> component to entity based on config data.</para>
</listitem><listitem><para>addSpawner() Adds <ref refid="structSpawner" kindref="compound">Spawner</ref> component to entity based on config data.</para>
</listitem><listitem><para>addFollower() Adds <ref refid="structFollower" kindref="compound">Follower</ref> component to entity based on config data.</para>
</listitem><listitem><para>addDeathEffect() Adds <ref refid="structDeathEffect" kindref="compound">DeathEffect</ref> component to entity based on config data.</para>
</listitem><listitem><para>addParent() Adds Parent component to entity based on config data.</para>
</listitem><listitem><para>initializeGameEntitiesFromConfig() Initializes game entities based on a config file. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="250" column="6" bodyfile="src/SceneParsing.cpp" bodystart="250" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a60a73bcb962e3dd60b9fba4fd15da707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addVelocity</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addVelocity</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="259" column="6" bodyfile="src/SceneParsing.cpp" bodystart="259" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1ad01ea601e59c943c67baf05cd422bfa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addCollision</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addCollision</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="266" column="6" bodyfile="src/SceneParsing.cpp" bodystart="266" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1aed79e7f262ecf05feef258363cf62980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addDrawable</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addDrawable</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="289" column="6" bodyfile="src/SceneParsing.cpp" bodystart="289" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a9df923b1cad1f75555d1baf7e2b70e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addAcceleration</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addAcceleration</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="301" column="6" bodyfile="src/SceneParsing.cpp" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a1e8ef56b62e13af6dac45fc220ab0198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addAnimation</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addAnimation</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="308" column="6" bodyfile="src/SceneParsing.cpp" bodystart="308" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a07cefed8188d0b4c5684d4fa07e04730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addGameConfig</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addGameConfig</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="323" column="6" bodyfile="src/SceneParsing.cpp" bodystart="323" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a355439ca89f752d527d174e35155d004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addControllable</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addControllable</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="331" column="6" bodyfile="src/SceneParsing.cpp" bodystart="331" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1aa0d64aa2b2de7bc7c2a1f1bb07a7c7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addLaser</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addLaser</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="340" column="6" bodyfile="src/SceneParsing.cpp" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1ac65b2974e6f7ba697e0029b72ccaf95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addDepth</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addDepth</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="344" column="6" bodyfile="src/SceneParsing.cpp" bodystart="344" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a53bd69fc10d282308e52d656a50eefcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addBehavior</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addBehavior</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="350" column="6" bodyfile="src/SceneParsing.cpp" bodystart="350" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1ab7968b055d6067e3877900a77f9e924c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addFFT</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addFFT</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="358" column="6" bodyfile="src/SceneParsing.cpp" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1af752b7fd24fb02acb2b77bf5824489b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addSpawner</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addSpawner</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="361" column="6" bodyfile="src/SceneParsing.cpp" bodystart="361" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a7f00ac07d7309d80d04623bd776877a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addFollower</definition>
        <argsstring>(entity_t parentEntity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addFollower</name>
        <param>
          <type>entity_t</type>
          <declname>parentEntity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="397" column="6" bodyfile="src/SceneParsing.cpp" bodystart="397" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a5805e23970f05edd8546adee766fec4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addDeathEffect</definition>
        <argsstring>(entity_t entity, Registry &amp;registry, const libconfig::Setting &amp;componentData)</argsstring>
        <name>addDeathEffect</name>
        <param>
          <type>entity_t</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const libconfig::Setting &amp;</type>
          <declname>componentData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="430" column="6" bodyfile="src/SceneParsing.cpp" bodystart="430" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="SceneParsing_8cpp_1a4312ada8f40f05c5dbdd2bb32c16d223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeGameEntitiesFromConfig</definition>
        <argsstring>(Registry &amp;registry, const std::string &amp;configFilePath)</argsstring>
        <name>initializeGameEntitiesFromConfig</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>configFilePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SceneParsing.cpp" line="452" column="6" bodyfile="src/SceneParsing.cpp" bodystart="452" bodyend="507"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2024</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Rtype</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>SceneParsing.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SceneParsing.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Global.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">std::unordered_map&lt;std::string,<sp/>ComponentAdder&gt;<sp/>componentAdderMap<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Position&quot;</highlight><highlight class="normal">,<sp/>addPosition},</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Velocity&quot;</highlight><highlight class="normal">,<sp/>addVelocity},</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Drawable&quot;</highlight><highlight class="normal">,<sp/>addDrawable},</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Collision&quot;</highlight><highlight class="normal">,<sp/>addCollision},</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Acceleration&quot;</highlight><highlight class="normal">,<sp/>addAcceleration},</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Animation&quot;</highlight><highlight class="normal">,<sp/>addAnimation},</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;GameConfig&quot;</highlight><highlight class="normal">,<sp/>addGameConfig},</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Controllable&quot;</highlight><highlight class="normal">,<sp/>addControllable},</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Laser&quot;</highlight><highlight class="normal">,<sp/>addLaser},</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Depth&quot;</highlight><highlight class="normal">,<sp/>addDepth},</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Behavior&quot;</highlight><highlight class="normal">,<sp/>addBehavior},</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;FFT&quot;</highlight><highlight class="normal">,<sp/>addFFT},</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Spawner&quot;</highlight><highlight class="normal">,<sp/>addSpawner},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Follower&quot;</highlight><highlight class="normal">,<sp/>addFollower},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DeathEffect&quot;</highlight><highlight class="normal">,<sp/>addDeathEffect},</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">ComponentAdder*<sp/>getComponentAdderByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(componentAdderMap.find(name)<sp/>!=<sp/>componentAdderMap.end())<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;componentAdderMap[name];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">ComponentSpawner<sp/>makeAdder(entity_t<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addPosition&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[x,<sp/>y](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{x,<sp/>y,<sp/>x,<sp/>y});</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Similar<sp/>functions<sp/>for<sp/>other<sp/>component<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addVelocity&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[x,<sp/>y](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addAcceleration&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[x,<sp/>y](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addDrawable&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>textureName<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;textureName&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>textureRect;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureRect.left<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;textureRect&quot;</highlight><highlight class="normal">][0];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureRect.top<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;textureRect&quot;</highlight><highlight class="normal">][1];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureRect.width<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;textureRect&quot;</highlight><highlight class="normal">][2];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureRect.height<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;textureRect&quot;</highlight><highlight class="normal">][3];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[textureName,<sp/>textureRect](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{textureName,<sp/>textureRect});</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addCollision&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>entityType<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;entityType&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>colliderType<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;colliderType&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>colliderTypeMap.find(colliderType);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>colliderTypeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collider<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it2<sp/>=<sp/>entityTypeMap.find(entityType);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>!=<sp/>entityTypeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>it2-&gt;second;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[type,<sp/>collider](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{type,<sp/>collider});</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>entity<sp/>type<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>entityType<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>return<sp/>statement<sp/>here<sp/>to<sp/>exit<sp/>early<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>collider<sp/>type<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>colliderType<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>return<sp/>statement<sp/>here<sp/>to<sp/>exit<sp/>early<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addAnimation&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentFrame<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;currentFrame&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numFrames<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;numFrames&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frameDuration<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;frameDuration&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>elapsedTime<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;elapsedTime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loop<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;loop&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[currentFrame,<sp/>numFrames,<sp/>frameDuration,<sp/>elapsedTime,<sp/>loop](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{currentFrame,<sp/>numFrames,<sp/>frameDuration<sp/>/<sp/>FRAMERATE,<sp/>elapsedTime,<sp/>loop});</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addGameConfig&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenWidth<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;screenWidth&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenHeight<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;screenHeight&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>playerSpeed<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;playerSpeed&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[screenWidth,<sp/>screenHeight,<sp/>playerSpeed](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structGameConfig" kindref="compound">GameConfig</ref>{screenWidth,<sp/>screenHeight,<sp/>playerSpeed});</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addControllable&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLocal<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;isLocal&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>client_id<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;client_id&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[isLocal,<sp/>client_id](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structControllable" kindref="compound">Controllable</ref>{isLocal,<sp/>client_id});</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addLaser&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structLaser" kindref="compound">Laser</ref>{});</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addDepth&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[z](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{z});</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addBehavior&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>behaviorID<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[behaviorID](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{behaviorID});</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addFFT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFFT" kindref="compound">FFT</ref>{});</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addDeathEffect&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>effectName<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>applyTo<sp/>=<sp/>params[</highlight><highlight class="stringliteral">&quot;applyTo&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>EffectFunctionMap.find(effectName);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>EffectFunctionMap.end())<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>effect<sp/>=<sp/>it-&gt;second;<sp/><sp/></highlight><highlight class="comment">//<sp/>Capture<sp/>the<sp/>effect<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it2<sp/>=<sp/>deathApplyTypeMap.find(applyTo);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>!=<sp/>deathApplyTypeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>it2-&gt;second;<sp/><sp/></highlight><highlight class="comment">//<sp/>Capture<sp/>the<sp/>entity<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[effectName,<sp/>effect,<sp/>type](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDeathEffect" kindref="compound">DeathEffect</ref>{effectName,<sp/>effect,<sp/>type});</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>entity<sp/>type<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>applyTo<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>death<sp/>effect<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>effectName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addParent&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[parent](entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structIsChild" kindref="compound">IsChild</ref>{parent});</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPosition(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{x,<sp/>y,<sp/>x,<sp/>y});</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Similar<sp/>functions<sp/>for<sp/>other<sp/>component<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addVelocity(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addCollision(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>entityType;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>colliderType<sp/>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;entityType&quot;</highlight><highlight class="normal">,<sp/>entityType);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;colliderType&quot;</highlight><highlight class="normal">,<sp/>colliderType);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>colliderTypeMap.find(colliderType);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>colliderTypeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collider<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it2<sp/>=<sp/>entityTypeMap.find(entityType);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>!=<sp/>entityTypeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>it2-&gt;second;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structCollision" kindref="compound">Collision</ref>{type,<sp/>collider});</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>entity<sp/>type<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>entityType<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>return<sp/>statement<sp/>here<sp/>to<sp/>exit<sp/>early<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>collider<sp/>type<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>colliderType<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>return<sp/>statement<sp/>here<sp/>to<sp/>exit<sp/>early<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDrawable(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>textureName;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMyRect" kindref="compound">MyRect</ref><sp/>textureRect;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;textureName&quot;</highlight><highlight class="normal">,<sp/>textureName);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>textureRectSetting<sp/>=<sp/>componentData[</highlight><highlight class="stringliteral">&quot;textureRect&quot;</highlight><highlight class="normal">];<sp/></highlight><highlight class="comment">//<sp/>Fixed<sp/>this<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>textureRect.left<sp/>=<sp/>textureRectSetting[0];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>textureRect.top<sp/>=<sp/>textureRectSetting[1];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>textureRect.width<sp/>=<sp/>textureRectSetting[2];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>textureRect.height<sp/>=<sp/>textureRectSetting[3];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{textureName,<sp/>textureRect});</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addAcceleration(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAcceleration" kindref="compound">Acceleration</ref>{x,<sp/>y});</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addAnimation(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numFrames<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frameDuration<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>elapsedTime<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;currentFrame&quot;</highlight><highlight class="normal">,<sp/>currentFrame);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;numFrames&quot;</highlight><highlight class="normal">,<sp/>numFrames);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;frameDuration&quot;</highlight><highlight class="normal">,<sp/>frameDuration);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;elapsedTime&quot;</highlight><highlight class="normal">,<sp/>elapsedTime);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;loop&quot;</highlight><highlight class="normal">,<sp/>loop);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structAnimation" kindref="compound">Animation</ref>{currentFrame,<sp/>numFrames,<sp/>frameDuration/FRAMERATE,<sp/>elapsedTime,<sp/>loop});</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addGameConfig(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>screenWidth,<sp/>screenHeight,<sp/>playerSpeed;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;screenWidth&quot;</highlight><highlight class="normal">,<sp/>screenWidth);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;screenHeight&quot;</highlight><highlight class="normal">,<sp/>screenHeight);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;playerSpeed&quot;</highlight><highlight class="normal">,<sp/>playerSpeed);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structGameConfig" kindref="compound">GameConfig</ref>{screenWidth,<sp/>screenHeight,<sp/>playerSpeed});</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addControllable(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLocal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>client_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;isLocal&quot;</highlight><highlight class="normal">,<sp/>isLocal);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;client_id&quot;</highlight><highlight class="normal">,<sp/>client_id);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structControllable" kindref="compound">Controllable</ref>{isLocal,<sp/>client_id});</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addLaser(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structLaser" kindref="compound">Laser</ref>{});</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDepth(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>z);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{z});</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBehavior(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>behaviorID;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structBehavior" kindref="compound">Behavior</ref><sp/>behavior;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>behaviorID);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structBehavior" kindref="compound">Behavior</ref>{behaviorID});</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFFT(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structFFT" kindref="compound">FFT</ref>{});</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSpawner(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>spawnRate<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeSinceLastSpawn<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>entityToSpawn;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xOffset<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yOffset<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xVelocity<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yVelocity<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ComponentSpawner<sp/>&gt;<sp/>componentAdders;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;spawnRate&quot;</highlight><highlight class="normal">,<sp/>spawnRate);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;timeSinceLastSpawn&quot;</highlight><highlight class="normal">,<sp/>timeSinceLastSpawn);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;entityToSpawn&quot;</highlight><highlight class="normal">,<sp/>entityToSpawn);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;xOffset&quot;</highlight><highlight class="normal">,<sp/>xOffset);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;yOffset&quot;</highlight><highlight class="normal">,<sp/>yOffset);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;xVelocity&quot;</highlight><highlight class="normal">,<sp/>xVelocity);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;yVelocity&quot;</highlight><highlight class="normal">,<sp/>yVelocity);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>componentAdders<sp/>is<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inside<sp/>your<sp/>function<sp/>that<sp/>populates<sp/>the<sp/>Spawner<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(componentData.exists(</highlight><highlight class="stringliteral">&quot;componentAdders&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentAddersData<sp/>=<sp/>componentData[</highlight><highlight class="stringliteral">&quot;componentAdders&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>componentAddersData.getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentAdderData<sp/>=<sp/>componentAddersData[i];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>componentAdderData.lookupValue(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>params<sp/>=<sp/>componentAdderData[</highlight><highlight class="stringliteral">&quot;params&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>adder<sp/>=<sp/>makeAdder(entity,<sp/>name,<sp/>params);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adder)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>componentAdders.push_back(adder);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structSpawner" kindref="compound">Spawner</ref>{spawnRate,<sp/>timeSinceLastSpawn,<sp/>entityToSpawn,<sp/>xOffset,<sp/>yOffset,<sp/>xVelocity,<sp/>yVelocity,<sp/>componentAdders});</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFollower(entity_t<sp/>parentEntity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>basic<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xOffset<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yOffset<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;xOffset&quot;</highlight><highlight class="normal">,<sp/>xOffset);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;yOffset&quot;</highlight><highlight class="normal">,<sp/>yOffset);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>type);<sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>&apos;type&apos;<sp/>is<sp/>the<sp/>entity<sp/>type<sp/>of<sp/>the<sp/>follower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>follower<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_t<sp/>followerEntity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>Follower<sp/>component<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(followerEntity,<sp/><ref refid="structFollower" kindref="compound">Follower</ref>{parentEntity,<sp/>xOffset,<sp/>yOffset});</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>other<sp/>components<sp/>based<sp/>on<sp/>the<sp/>componentAdders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(componentData.exists(</highlight><highlight class="stringliteral">&quot;componentAdders&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentAddersData<sp/>=<sp/>componentData[</highlight><highlight class="stringliteral">&quot;componentAdders&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>componentAddersData.getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentAdderData<sp/>=<sp/>componentAddersData[i];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>componentAdderData.lookupValue(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>params<sp/>=<sp/>componentAdderData[</highlight><highlight class="stringliteral">&quot;params&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentSpawner<sp/>adder<sp/>=<sp/>makeAdder(parentEntity,<sp/>name,<sp/>params);<sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>makeAdder<sp/>returns<sp/>a<sp/>ComponentSpawner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adder)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adder(followerEntity,<sp/>registry);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>the<sp/>position<sp/>in<sp/>a<sp/>kinda<sp/>hacky<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDeathEffect(entity_t<sp/>entity,<sp/><ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting&amp;<sp/>componentData)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>effectName;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>applyTo;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>effectName);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;applyTo&quot;</highlight><highlight class="normal">,<sp/>applyTo);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>EffectFunctionMap.find(effectName);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>EffectFunctionMap.end())<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>effect<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it2<sp/>=<sp/>deathApplyTypeMap.find(applyTo);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>!=<sp/>deathApplyTypeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>it2-&gt;second;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDeathEffect" kindref="compound">DeathEffect</ref>{effectName,<sp/>effect,<sp/>type});</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>entity<sp/>type<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>applyTo<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>return<sp/>statement<sp/>here<sp/>to<sp/>exit<sp/>early<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>death<sp/>effect<sp/>found<sp/>for<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>effectName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>return<sp/>statement<sp/>here<sp/>to<sp/>exit<sp/>early<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeGameEntitiesFromConfig(<ref refid="classRegistry" kindref="compound">Registry</ref><sp/>&amp;registry,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;configFilePath)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>libconfig::Config<sp/>cfg;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg.readFile(configFilePath.c_str());</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::FileIOException<sp/>&amp;fioex)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;I/O<sp/>error<sp/>while<sp/>reading<sp/>config<sp/>file.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::ParseException<sp/>&amp;pex)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parse<sp/>error<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pex.getFile()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pex.getLine()</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pex.getError()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.clientToEntityMap.clear();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting<sp/>&amp;root<sp/>=<sp/>cfg.getRoot();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting<sp/>&amp;entities<sp/>=<sp/>root[</highlight><highlight class="stringliteral">&quot;entities&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundPlayer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>entities.getLength();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting<sp/>&amp;entityData<sp/>=<sp/>entities[i];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>all<sp/>fields<sp/>in<sp/>the<sp/>entity&apos;s<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>entityData.getLength();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>libconfig::Setting<sp/>&amp;componentData<sp/>=<sp/>entityData[j];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;componentName<sp/>=<sp/>componentData.getName();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>make<sp/>a<sp/>little<sp/>cheat<sp/>here<sp/>to<sp/>get<sp/>the<sp/>entity<sp/>id<sp/>if<sp/>a<sp/>player<sp/>is<sp/>created:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>a<sp/>useless<sp/>field<sp/>name<sp/>type=&quot;Player&quot;<sp/>in<sp/>the<sp/>config<sp/>file<sp/>associated<sp/>with<sp/>the<sp/>player<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>will<sp/>use<sp/>it<sp/>to<sp/>get<sp/>the<sp/>id<sp/>of<sp/>the<sp/>player<sp/>and<sp/>add<sp/>it<sp/>to<sp/>registry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(componentName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foundPlayer)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>multiple<sp/>players<sp/>found<sp/>in<sp/>config<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLocal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//print<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>componentData.lookupValue(</highlight><highlight class="stringliteral">&quot;isPlayer&quot;</highlight><highlight class="normal">,<sp/>isLocal);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLocal)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry.clientToEntityMap[-42]<sp/>=<sp/>entity;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>ugly<sp/>but<sp/>it<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundPlayer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>component<sp/>adder<sp/>for<sp/>this<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>componentAdderMap.find(componentName);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>componentAdderMap.end())<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>component<sp/>adder<sp/>to<sp/>add<sp/>the<sp/>component<sp/>to<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;second(entity,<sp/>registry,<sp/>componentData);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>debug<sp/>can<sp/>you<sp/>add<sp/>a<sp/>entity<sp/>that<sp/>have<sp/>a<sp/>textDrawable<sp/>component<sp/>thats<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity<sp/>=<sp/>registry.spawn_entity();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structPosition" kindref="compound">Position</ref>{0,<sp/>0});</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structTextDrawable" kindref="compound">TextDrawable</ref>{</highlight><highlight class="stringliteral">&quot;Hello<sp/>World&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;font&quot;</highlight><highlight class="normal">,<sp/>50});</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDepth" kindref="compound">Depth</ref>{0.0f});</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>registry.add_component(entity,<sp/><ref refid="structDrawable" kindref="compound">Drawable</ref>{</highlight><highlight class="stringliteral">&quot;background&quot;</highlight><highlight class="normal">,<sp/><ref refid="structMyRect" kindref="compound">MyRect</ref>{0,<sp/>0,<sp/>1920,<sp/>1080}});</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/SceneParsing.cpp"/>
  </compounddef>
</doxygen>
