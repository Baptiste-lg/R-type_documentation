<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ClientMain_8cpp" kind="file" language="C++">
    <compoundname>ClientMain.cpp</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="ClientMain_8cpp_1af3facad10e05defa48d45b46eb9ebe7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char getch</definition>
        <argsstring>()</argsstring>
        <name>getch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ClientMain.cpp</para>
<para>Implements functionality for client-side game entity initialization and terminal input handling for the game.</para>
<para>Functions:</para>
<para><itemizedlist>
<listitem><para>getch() Captures a single character from the terminal input in non-blocking mode, without echoing the input character to the terminal.</para>
</listitem><listitem><para>initializeGameEntitiesClient(Registry&amp; registry) Initializes the game entities on the client-side by invoking the spawnClientEntity function with the provided registry.</para>
</listitem></itemizedlist>
</para>
<para>Dependencies:</para>
<para><itemizedlist>
<listitem><para><ref refid="ClientMain_8hpp_source" kindref="compound">ClientMain.hpp</ref> Header file which may contain declarations relevant to client-side operations.</para>
</listitem><listitem><para><ref refid="Spawner_8hpp_source" kindref="compound">Spawner.hpp</ref> Header file containing the declaration of spawnClientEntity function and possibly other entity spawning related functionalities. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ClientMain.cpp" line="38" column="6" bodyfile="src/ClientMain.cpp" bodystart="38" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="ClientMain_8cpp_1a5d5d11aab9ceeb24cc399b6368dfcf9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeGameEntitiesClient</definition>
        <argsstring>(Registry &amp;registry)</argsstring>
        <name>initializeGameEntitiesClient</name>
        <param>
          <type><ref refid="classRegistry" kindref="compound">Registry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ClientMain.cpp" line="55" column="6" bodyfile="src/ClientMain.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">**<sp/>EPITECH<sp/>PROJECT,<sp/>2023</highlight></codeline>
<codeline lineno="3"><highlight class="comment">**<sp/>Rtype</highlight></codeline>
<codeline lineno="4"><highlight class="comment">**<sp/>File<sp/>description:</highlight></codeline>
<codeline lineno="5"><highlight class="comment">**<sp/>ClientMain.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ClientMain.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Spawner.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>getch()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">termios<sp/>old<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcgetattr(0,<sp/>&amp;old)<sp/>&lt;<sp/>0)<sp/>perror(</highlight><highlight class="stringliteral">&quot;tcsetattr()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>old.c_lflag<sp/>&amp;=<sp/>~ICANON;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>old.c_lflag<sp/>&amp;=<sp/>~ECHO;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>old.c_cc[VMIN]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>old.c_cc[VTIME]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcsetattr(0,<sp/>TCSANOW,<sp/>&amp;old)<sp/>&lt;<sp/>0)<sp/>perror(</highlight><highlight class="stringliteral">&quot;tcsetattr<sp/>ICANON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read(0,<sp/>&amp;buf,<sp/>1)<sp/>&lt;<sp/>0)<sp/>perror(</highlight><highlight class="stringliteral">&quot;read()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>old.c_lflag<sp/>|=<sp/>ICANON;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>old.c_lflag<sp/>|=<sp/>ECHO;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcsetattr(0,<sp/>TCSADRAIN,<sp/>&amp;old)<sp/>&lt;<sp/>0)<sp/>perror(</highlight><highlight class="stringliteral">&quot;tcsetattr<sp/>~ICANON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeGameEntitiesClient(<ref refid="classRegistry" kindref="compound">Registry</ref>&amp;<sp/>registry)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//spawn<sp/>the<sp/>client<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>spawnClientEntity(registry);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ClientMain.cpp"/>
  </compounddef>
</doxygen>
